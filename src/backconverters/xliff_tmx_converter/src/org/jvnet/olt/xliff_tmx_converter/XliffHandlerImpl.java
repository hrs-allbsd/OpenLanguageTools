/*
* CDDL HEADER START
*
* The contents of this file are subject to the terms of the
* Common Development and Distribution License (the "License").
* You may not use this file except in compliance with the License.
*
* You can obtain a copy of the license at LICENSE.txt
* or http://www.opensource.org/licenses/cddl1.php.
* See the License for the specific language governing permissions
* and limitations under the License.
*
* When distributing Covered Code, include this CDDL HEADER in each
* file and include the License file at LICENSE.txt.
* If applicable, add the following below this CDDL HEADER, with the
* fields enclosed by brackets "[]" replaced with your own identifying
* information: Portions Copyright [yyyy] [name of copyright owner]
*
* CDDL HEADER END
*/

/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/*
 * File:           XliffHandlerImpl.java
 * Date:           August 8, 2002  1:46 PM
 *
 * @author  kb128066
 * @version generated by NetBeans XML module
 */
package org.jvnet.olt.xliff_tmx_converter;

import org.xml.sax.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.Reader;
import java.io.File;
import java.util.logging.*;
import java.net.URI;
import java.net.URL;
import java.io.InputStreamReader;

/**
 * Receives notification of XLIFF Parser Events and acts upon those events.
 *
 * <p><code>XliffHandlerImpl</code> is an implementation of the 
 * <code>XliffHandler</code> interface. It receives notification of XLIFF 
 * Parser Events from the XLIFF Parser and creates 
 * <code>SegmentedFile</code> objects based on the data supplied.</p>
 *
 * @author    Brian Kidney
 * @version   August 8, 2002
 * @see       <a href="http://www.oasis-open.org/committees/xliff/">XLIFF Standards Site</a>
 * @see       <a href="http://www.oasis-open.org/committees/xliff/documents/xliff.dtd">XLIFF DTD</a>
 * @see       SegmentedFile
 * @see       SegmentedFileImpl
 */
public class XliffHandlerImpl implements XliffHandler {
    

    /*
     * A logging object
     */
    private static Logger logger = null;
    
    private boolean inTransUnit = false;
    
    private boolean isTranslated = false;
         
    /**
     * Constructor for the XliffHandlerImpl object
     *
     * @param theLogger  The logging object (For logging messages).
     */
    public XliffHandlerImpl(Logger theLogger) 
                            {
        logger = theLogger;
    }


    
    /**
     * An event handler indicating the start of a group element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_group(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_group: " + meta);
    }


    /**
     * An event handler indicating the end of a group element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_group() throws SAXException {
        logger.log(Level.FINEST, "end_group()");
    }


    /**
     * An event handler indicating that an external file has been 
     * encountered.
     *
     * When we encounter an external file, the location of the external file
     * is got from the href attribute of the external-file attribute. This
     * file is then opened and read using a Reader.
     *
     * Later in the <code>end_file</code> method, this reader is sent to the 
     * <code>XliffSkeletonParser</code> for parsing.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_external_file(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "handle_external_file: " + meta);        
    }


    /**
     * An event handler indicating the start of a file element.
     *
     * This event triggers the creation of a new <code>SegemtedFile</code>
     * object and the original filename of the file from before it was 
     * segmented (e.g. index.html, docbook.xml, etc.), is set in the new 
     * <code>SegemtedFile</code> object.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_file(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_file: " + meta);
    }


    /**
     * An event handler indicating the end of a file element.
     *
     * This event sets the <code>SegmentedFile</code> object in the 
     * XliffSkeletonHandler, so that the data from the  
     * <code>SegmentedFile</code> object can be merged into the output of 
     * the XliffSkeletonParser.
     *
     * This method also sends the reader of the xliff skeleton file from 
     * above to the <code>XliffSkeletonParser</code> for parsing.
     *
     * @exception SAXException  Any SAXException
     */
     public void end_file() throws SAXException 
     {
        logger.log(Level.FINEST, "end_file()");

    }


    /**
     * An event handler indicating the start of a phase element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_phase(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_phase: " + meta);
    }


    /**
     * An event handler indicating the end of a phase element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_phase() throws SAXException {
        logger.log(Level.FINEST, "end_phase()");
    }


    /**
     * An event handler indicating the start of a ph element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_ph(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_ph: " + meta);
    }


    /**
     * An event handler indicating the contents of a ph element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_ph(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_ph: " + data);
    }


    /**
     * An event handler indicating the end of a ph element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_ph() throws SAXException {
        logger.log(Level.FINEST, "end_ph()");
    }


    /**
     * An event handler indicating the contents of a x element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_x(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_x: " + meta);
    }


    /**
     * An event handler indicating the start of a xliff element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_xliff(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_xliff: " + meta); 
    }


    /**
     * An event handler indicating the end of a xliff element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_xliff() throws SAXException {
        logger.log(Level.FINEST, "end_xliff()");
    }


    /**
     * An event handler indicating the contents of a ex element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_ex(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_ex: " + meta);
    }


    /**
     * An event handler indicating the contents of a note element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_note(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_note: " + data);
    }


    /**
     * An event handler indicating the contents of a context element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_context(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_context: " + data);
    }


    /**
     * An event handler indicating the start of a phase-group element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_phase_group(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "start_phase_group: " + meta);
    }


    /**
     * An event handler indicating the end of a phase-group element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_phase_group() throws SAXException {
        logger.log(Level.FINEST, "end_phase_group()");
    }


    /**
     * An event handler indicating the start of a it element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_it(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_it: " + meta);
    }


    /**
     * An event handler indicating the contents of a it element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_it(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_it: " + data);
    }


    /**
     * An event handler indicating the end of a it element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_it() throws SAXException {
        logger.log(Level.FINEST, "end_it()");
    }


    /**
     * An event handler indicating the start of a ept element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_ept(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_ept: " + meta);
    }


    /**
     * An event handler indicating the contents of a ept element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_ept(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_ept: " + data);
    }


    /**
     * An event handler indicating the end of a ept element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_ept() throws SAXException {
        logger.log(Level.FINEST, "end_ept()");
    }


    /**
     * An event handler indicating the start of a g element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_g(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_g: " + meta);
    }


    /**
     * An event handler indicating the contents of a g element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_g(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_g: " + data);
    }


    /**
     * An event handler indicating the end of a g element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_g() throws SAXException {
        logger.log(Level.FINEST, "end_g()");
    }


    /**
     * An event handler indicating the start of a mrk element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_mrk(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_mrk: " + meta);
    }


    /**
     * An event handler indicating the contents of a mrk element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_mrk(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_mrk: " + data);
    }


    /**
     * An event handler indicating the end of a mrk element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_mrk() throws SAXException {
        logger.log(Level.FINEST, "end_mrk()");
    }


    /**
     * An event handler indicating the start of a bpt element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_bpt(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_bpt: " + meta);
    }


    /**
     * An event handler indicating the contents of a bpt element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_bpt(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_bpt: " + data);

    }


    /**
     * An event handler indicating the end of a bpt element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_bpt() throws SAXException {
        logger.log(Level.FINEST, "end_bpt()");
    }


    /**
     * An event handler indicating the contents of a prop element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_prop(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_prop: " + data);
    }


    /**
     * An event handler indicating the start of a body element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_body(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_body: " + meta);
    }


    /**
     * An event handler indicating the end of a body element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_body() throws SAXException {
        logger.log(Level.FINEST, "end_body()");
    }


    /**
     * An event handler indicating the start of a context-group element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_context_group(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "start_context_group: " + meta);
    }


    /**
     * An event handler indicating the end of a context-group element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_context_group() throws SAXException {
        logger.log(Level.FINEST, "end_context_group()");
    }


    /**
     * An event handler indicating the start of a bin-source element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_bin_source(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "start_bin_source: " + meta);
    }


    /**
     * An event handler indicating the end of a bin-source element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_bin_source() throws SAXException {
        logger.log(Level.FINEST, "end_bin_source()");
    }


    /**
     * An event handler indicating the start of a glossary element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_glossary(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_glossary: " + meta);
    }


    /**
     * An event handler indicating the end of a glossary element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_glossary() throws SAXException {
        logger.log(Level.FINEST, "end_glossary()");
    }


    /**
     * An event handler indicating the start of a source element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_source(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_source: " + meta);
    }


    /**
     * An event handler indicating the contents of a source element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_source(final java.lang.String data, 
        final Attributes meta)
         throws SAXException {
        logger.log(Level.FINEST, "handle_source: " + data);
    }


    /**
     * An event handler indicating the end of a source element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_source() throws SAXException {
        logger.log(Level.FINEST, "end_source()");

    }


    /**
     * An event handler indicating the start of a bin-target element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_bin_target(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "start_bin_target: " + meta);
    }


    /**
     * An event handler indicating the end of a bin-target element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_bin_target() throws SAXException {
        logger.log(Level.FINEST, "end_bin_target()");
    }


    /**
     * An event handler indicating the contents of a bx element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_bx(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_bx: " + meta);
    }


    /**
     * An event handler indicating the start of a prop-group element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_prop_group(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "start_prop_group: " + meta);
    }


    /**
     * An event handler indicating the end of a prop-group element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_prop_group() throws SAXException {
        logger.log(Level.FINEST, "end_prop_group()");
    }


    /**
     * An event handler indicating the start of a skl element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_skl(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_skl: " + meta);
    }


    /**
     * An event handler indicating the end of a skl element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_skl() throws SAXException {
        logger.log(Level.FINEST, "end_skl()");
    }


    /**
     * An event handler indicating the start of a target element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_target(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_target: " + meta);
    }


    /**
     * An event handler indicating the contents of a target element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_target(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_target: " + data);
               
        if(inTransUnit) {
            String state = meta.getValue("state");
            
            if(state==null) {
                throw new NullPointerException("Cannot generate tmx. Segment has not defined state.");
            }
            
            if(state.equals("100-Match:approved")){
                isTranslated = true; 
            }
            if(state.equals("auto-translated:approved")){
                isTranslated = true; 
            }
            if(state.equals("user:approved")){
                isTranslated = true; 
            }
            if(state.equals("fuzzy:approved")){
                isTranslated = true; 
            }
            if(state.equals("non-translated:approved")){
                isTranslated = true; 
            }
            if(state.equals("100-Match:translated")){
                isTranslated = true; 
            }
            if(state.equals("auto-translated:translated")){
                isTranslated = true; 
            }
            if(state.equals("user:translated")){
                isTranslated = true; 
            }
            if(state.equals("fuzzy:translated")){
                isTranslated = true; 
            }
            if(state.equals("non-translated:translated")){
                isTranslated = true; 
            }  
           
        }
                
    }


    /**
     * An event handler indicating the end of a target element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_target() throws SAXException {
        logger.log(Level.FINEST, "end_target()");      
    }


    /**
     * An event handler indicating the contents of a count element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_count(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_count: " + data);
    }


    /**
     * An event handler indicating the start of a header element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_header(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_header: " + meta);
    }


    /**
     * An event handler indicating the end of a header element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_header() throws SAXException {
        logger.log(Level.FINEST, "end_header()");
    }


    /**
     * An event handler indicating the contents of an internal-file element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * Note: Code Needs to be added here to handle internal XLIFF Skeleton 
     * files.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_internal_file(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_internal_file: " + data);
    }


    /**
     * An event handler indicating the start of a reference element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_reference(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_reference: " + meta);
    }


    /**
     * An event handler indicating the end of a reference element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_reference() throws SAXException {
        logger.log(Level.FINEST, "end_reference()");
    }


    /**
     * An event handler indicating the start of a bin-unit element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_bin_unit(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_bin_unit: " + meta);
    }


    /**
     * An event handler indicating the end of a bin-unit element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_bin_unit() throws SAXException {
        logger.log(Level.FINEST, "end_bin_unit()");
    }


    /**
     * An event handler indicating the start of a trans-unit element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_trans_unit(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "start_trans_unit: " + meta);
        inTransUnit = true;
        isTranslated = false;
    }


    /**
     * An event handler indicating the end of a trans-unit element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_trans_unit() 
        throws SAXException, XliffTargetNotFoundException {
        logger.log(Level.FINEST, "end_trans_unit()");
        inTransUnit = false;
                
        if(!isTranslated) {
            throw new XliffTargetNotFoundException();
        }
        isTranslated = false;
    }


    /**
     * An event handler indicating the start of a alt-trans element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_alt_trans(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_alt_trans: " + meta);
        inTransUnit = false;
    }


    /**
     * An event handler indicating the end of a alt-trans element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_alt_trans() throws SAXException {
        logger.log(Level.FINEST, "end_alt_trans()");
        inTransUnit = true;
    }


    /**
     * An event handler indicating the start of a count-group element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_count_group(final Attributes meta) 
        throws SAXException {
        logger.log(Level.FINEST, "start_count_group: " + meta);
    }


    /**
     * An event handler indicating the end of a count-group element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_count_group() throws SAXException {
        logger.log(Level.FINEST, "end_count_group()");
    }


    /**
     * An event handler indicating the start of a sub element.
     *
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void start_sub(final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "start_sub: " + meta);
    }


    /**
     * An event handler indicating the contents of a sub element.
     *
     * The contents of the element are then concatenated to the sourceString
     * and targetString.
     *
     * @param data              The value or null of the element
     * @param meta           The attributes and their values of the element.
     * @exception SAXException  Any SAXException
     */
    public void handle_sub(final java.lang.String data, 
        final Attributes meta) throws SAXException {
        logger.log(Level.FINEST, "handle_sub: " + data);

    }


    /**
     * An event handler indicating the end of a sub element.
     *
     * @exception SAXException  Any SAXException
     */
    public void end_sub() throws SAXException {
        logger.log(Level.FINEST, "end_sub()");
    }


    /**
     * The CDATA of an element
     *
     * @param values            The characters from the XML document.
     * @param param             The start position in the array.
     * @param param2            The number of characters to read from the 
     *                          array.
     * @exception SAXException  Any SAXException
     */
    public void characters(char[] values, int param, int param2) throws     
        SAXException {
        
    }


    /**
     * An event handler indicating the end of the document.
     *
     * @exception SAXException  Any SAXException
     */
    public void endDocument() throws SAXException {
    }


    /**
     * An event handler indicating the end of an element.
     *
     * @param str               The Namespace URI, or the empty string if 
     *                          the element has no Namespace URI or if 
     *                          Namespace processing is not being performed.
     * @param str1              The local name (without prefix), or the 
     *                          empty string if Namespace processing is not 
     *                          being performed.
     * @param str2              The qualified name (with prefix), or the 
     *                          empty string if qualified names are not 
     *                          available.
     * @exception SAXException  Any SAXException
     */
    public void endElement(String str, String str1, String str2) 
        throws SAXException {
    }


    /**
     * An event handler indicating the end of a prefix mapping.
     *
     * @param str               The Namespace URI, or the empty string if 
     *                          the element has no Namespace URI or if 
     *                          Namespace processing is not being performed.
     * @exception SAXException  Any SAXException
     */
    public void endPrefixMapping(String str) 
        throws SAXException {
    }


    /**
     * An event handler indicating tignorable white space.
     *
     * @param values            The characters from the XML document.
     * @param param             The start position in the array.
     * @param param2            The number of characters to read from the 
     *                          array.
     * @exception SAXException  Any SAXException
     */
    public void ignorableWhitespace(char[] values, int param, int param2) 
        throws SAXException {
    }


    /**
     * An event handler indicating processing instruction.
     *
     * @param str               The Namespace URI, or the empty string if 
     *                          the element has no Namespace URI or if 
     *                          Namespace processing is not being performed.
     * @param str1              The local name (without prefix), or the 
     *                          empty string if Namespace processing is not 
     *                          being performed.
     * @exception SAXException  Any SAXException
     */
    public void processingInstruction(String str, String str1) 
        throws SAXException {
    }


    /**
     * Sets the documentLocator attribute of the XliffHandlerImpl object
     *
     * @param locator  The new documentLocator value
     */
    public void setDocumentLocator(org.xml.sax.Locator locator) {
    }


    /**
     * An event handler indicating  a Skipped Entry
     *
     * @param str               The Namespace URI, or the empty string if 
     *                          the element has no Namespace URI or if 
     *                          Namespace processing is not being performed.
     * @exception SAXException  Any SAXException
     */
    public void skippedEntity(String str) throws SAXException {
    }


    /**
     * An event handler indicating the start of a document.
     *
     * @exception SAXException  Any SAXException
     */
    public void startDocument() throws SAXException {
    }


    /**
     * An event handler indicating the start of a  element.
     *
     * @param str               The Namespace URI, or the empty string if 
     *                          the element has no Namespace URI or if 
     *                          Namespace processing is not being performed.
     * @param str1              The local name (without prefix), or the 
     *                          empty string if Namespace processing is not 
     *                          being performed.
     * @param str2              The qualified name (with prefix), or the 
     *                          empty string if qualified names are not 
     *                          available.
     * @param attributes        The attributes attached to the element. If 
     *                          there are no attributes, it shall be an 
     *                          empty Attributes object.
     * @exception SAXException  Any SAXException
     */
    public void startElement(String str, String str1, String str2, 
        org.xml.sax.Attributes attributes) 
        throws SAXException {
    }


    /**
     * An event handler indicating the start of a prefix mapping.
     *
     * @param str               The Namespace prefix being declared
     * @param str1              The Namespace URI the prefix is mapped to.
     * @exception SAXException  Any SAXException
     */
    public void startPrefixMapping(String str, String str1) 
        throws SAXException {
    }

}

