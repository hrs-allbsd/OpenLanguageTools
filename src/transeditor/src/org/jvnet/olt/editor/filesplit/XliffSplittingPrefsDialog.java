
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/*
 * XliffSplittingPrefsDialog.java
 *
 * Created on 24 September 2003, 15:23
 */

package org.jvnet.olt.editor.filesplit;

import org.jvnet.olt.editor.filefilters.XliffFileFilter;
import org.jvnet.olt.editor.filefilters.ZippedXliffFileFilter;
import org.jvnet.olt.editor.filefilters.WritableDirectoryFileFilter;
import org.jvnet.olt.xliff.XliffDocument;
import org.jvnet.olt.utilities.XliffZipFileIO;
import java.io.File;
import java.io.IOException;
import java.util.zip.ZipException;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 * This class handles gathering valid preferences for the file splitting operation
 * from the user.
 * @author  jc73554
 */
public class XliffSplittingPrefsDialog extends JDialog {
    
    private String defaultFileName;
    
    private XliffSplittingPrefs preferences;
    
    private String defaultSuffix;
    
    private int defaultModulus;
    
    private String defaultOutputDir;
    
    /** Creates new form XliffSplittingPrefsDialog */
    public XliffSplittingPrefsDialog(JFrame frame) {
        super(frame, true);
        preferences = null;
        defaultSuffix = "chunk";
        defaultModulus = 100;
        defaultOutputDir = "";
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JLabel jLabel1;
        javax.swing.JLabel jLabel2;
        javax.swing.JLabel jLabel3;
        javax.swing.JLabel jLabel4;
        javax.swing.JPanel jPanel1;
        javax.swing.JPanel jPanel2;
        javax.swing.JPanel jPanel3;
        javax.swing.JPanel jPanel4;
        javax.swing.JPanel jPanel5;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputFileTextField = new javax.swing.JTextField();
        inputFileTextField.setText(defaultFileName);
        browseInputButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        suffixTextField = new javax.swing.JTextField();
        suffixTextField.setText(defaultSuffix);
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        segsPerFileTextField = new javax.swing.JTextField();
        segsPerFileTextField.setText("" + defaultModulus);
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        outputLocTextField = new javax.swing.JTextField();
        outputLocTextField.setText(defaultOutputDir);
        browseOutputLoc = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle("Set splitting preferences");
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(7, 7, 7, 7)));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setLabelFor(inputFileTextField);
        jLabel1.setText("Input file: ");
        jPanel2.add(jLabel1);

        inputFileTextField.setColumns(25);
        inputFileTextField.setToolTipText("TheXLF or XLZ file to be split");
        jPanel2.add(inputFileTextField);

        browseInputButton.setText("...");
        browseInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputButtonActionPerformed(evt);
            }
        });

        jPanel2.add(browseInputButton);

        jPanel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Suffix: ");
        jPanel3.add(jLabel2);

        suffixTextField.setColumns(30);
        suffixTextField.setToolTipText("A suffix to append to the names of the output files");
        jPanel3.add(suffixTextField);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setText("Segments per file:");
        jPanel4.add(jLabel3);

        segsPerFileTextField.setColumns(25);
        segsPerFileTextField.setToolTipText("The number of XLIFF translation units to put in each output file");
        jPanel4.add(segsPerFileTextField);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel4.setLabelFor(outputLocTextField);
        jLabel4.setText("Output directory: ");
        jPanel5.add(jLabel4);

        outputLocTextField.setColumns(21);
        outputLocTextField.setToolTipText("The directory to store the output files");
        jPanel5.add(outputLocTextField);

        browseOutputLoc.setText("...");
        browseOutputLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputLocActionPerformed(evt);
            }
        });

        jPanel5.add(browseOutputLoc);

        jPanel1.add(jPanel5);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 2, 7, 0));

        buttonPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(7, 7, 7, 7))));
        okButton.setMnemonic('O');
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setMnemonic('C');
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-432)/2, (screenSize.height-241)/2, 432, 241);
    }//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        handleCancelButton();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        handleOkButton();
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void browseOutputLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputLocActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        WritableDirectoryFileFilter dirFilter = new WritableDirectoryFileFilter();
        
        fileChooser.addChoosableFileFilter(dirFilter);
        fileChooser.setFileFilter(dirFilter);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setCurrentDirectory(null);

        int iReturn = fileChooser.showDialog(this, "Select");
        if(iReturn == JFileChooser.APPROVE_OPTION) {
            outputLocTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_browseOutputLocActionPerformed
    
    private void browseInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInputButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        ZippedXliffFileFilter zippedFilter = new ZippedXliffFileFilter();
        
        fileChooser.addChoosableFileFilter(zippedFilter);
        fileChooser.addChoosableFileFilter(new XliffFileFilter());
        fileChooser.setFileFilter(zippedFilter);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setCurrentDirectory(null);

        int iReturn = fileChooser.showDialog(this, "Select");
        if(iReturn == JFileChooser.APPROVE_OPTION) {
            inputFileTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_browseInputButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //  Treat this as a cancel.
        handleCancelButton();
    }//GEN-LAST:event_exitForm
    
    public XliffSplittingPrefs getPreferences() {
        return preferences;
    }
    
    public void setDefaultFilename(java.lang.String defaultFileName) {
        this.defaultFileName = defaultFileName;
    }
    
    protected boolean testFormValues(File inputFile, File outputDir, java.lang.String suffix, int numSegs) {
        String message = "";
        if( !(inputFile.exists() && inputFile.isFile() && inputFile.canRead()) ) {
            //  Display error message
            message = "The input file chosen is not a readable file. Please select a readable file.";
            JOptionPane.showMessageDialog(this, message, "Invalid form values", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if( !(outputDir.exists() && outputDir.isDirectory() && outputDir.canWrite()) ) {
            //  Display error message
            message = "The output location selected is not a writable directory. Please select a writable directory.";
            JOptionPane.showMessageDialog(this, message, "Invalid form values", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if(numSegs <= 0) {
            //  Display error message
            message = "The number of segments per file that has been specified is less than one. This value needs to be one or more.";
            JOptionPane.showMessageDialog(this, message, "Invalid form values", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        //  Add a possible test for the contents of the suffix here.
        
        return true;
    }
    
    protected XliffDocument openInputFile(File inputFile) throws IOException, ZipException {
        XliffZipFileIO zipIO = new XliffZipFileIO(inputFile);
        return zipIO.toXliffDocument();
    }
    
    protected void handleOkButton() {
        //  Set the defaults.
        defaultFileName = inputFileTextField.getText();
        defaultOutputDir = outputLocTextField.getText();
        defaultSuffix = suffixTextField.getText();
        
        try {
            defaultModulus = Integer.parseInt(segsPerFileTextField.getText());
        }
        catch(NumberFormatException numFormEx) {
            String msg = "The value specified for 'Segments per file' does not appear to be a number.";
            JOptionPane.showMessageDialog(this, msg, "Invalid form input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        File inputFile = new File(defaultFileName);
        File outputDirectory = new File(defaultOutputDir);
        
        if(testFormValues(inputFile, outputDirectory, defaultSuffix, defaultModulus)) {
            XliffDocument xliffDoc = null;
            String message = "";
            try {
                xliffDoc = openInputFile(inputFile);
            }
            catch(ZipException zipEx) {
                //  Display message and exit
                message = "The XLZ file that you selected appears to be corrupt. Please check the file and try again.";
                JOptionPane.showMessageDialog(this, message, "Read error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            catch(IOException ioEx) {
                //  Display message and exit
                message = "The was an unexpected error reading the input file that you selected. Please check the file and try again.";
                JOptionPane.showMessageDialog(this, message, "Read error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            preferences = new XliffSplittingPrefs();
            preferences.setXliffDocument(xliffDoc);
            preferences.setOutputLoc(outputDirectory);
            preferences.setSegmentNum(defaultModulus);
            preferences.setSuffix(defaultSuffix);
            
            this.dispose();
        }
    }
    
    protected void handleCancelButton() {
        //  Exit the dialog and set the prefs object to null.
        preferences = null;
        this.dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseInputButton;
    private javax.swing.JButton browseOutputLoc;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField outputLocTextField;
    private javax.swing.JTextField segsPerFileTextField;
    private javax.swing.JTextField suffixTextField;
    // End of variables declaration//GEN-END:variables
    
}
