/*
* CDDL HEADER START
*
* The contents of this file are subject to the terms of the
* Common Development and Distribution License (the "License").
* You may not use this file except in compliance with the License.
*
* You can obtain a copy of the license at LICENSE.txt
* or http://www.opensource.org/licenses/cddl1.php.
* See the License for the specific language governing permissions
* and limitations under the License.
*
* When distributing Covered Code, include this CDDL HEADER in each
* file and include the License file at LICENSE.txt.
* If applicable, add the following below this CDDL HEADER, with the
* fields enclosed by brackets "[]" replaced with your own identifying
* information: Portions Copyright [yyyy] [name of copyright owner]
*
* CDDL HEADER END
*/

/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/*
 * XliffMergingPrefsDialog.java
 *
 * Created on 26 September 2003, 18:12
 */

package org.jvnet.olt.editor.filesplit;

import org.jvnet.olt.editor.filefilters.XliffMergeDirectoryFileFilter;
import org.jvnet.olt.editor.filefilters.WritableDirectoryFileFilter;
import java.awt.Frame;
import java.io.File;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author  jc73554
 */
public class XliffMergingPrefsDialog extends JDialog {
    
    private String defaultInputDir;
    
    private String defaultOutputDir;
    
    private String defaultSuffix;
    
    private String defaultFileName;
    
    /** Holds value of property mergePreferences. */
    private XliffMergingPrefs mergePreferences;
    
    
    /** Creates new form XliffMergingPrefsDialog */
    public XliffMergingPrefsDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.JLabel jLabel1;
        javax.swing.JLabel jLabel2;
        javax.swing.JLabel jLabel3;
        javax.swing.JLabel jLabel4;

        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputDirectoryTextField = new javax.swing.JTextField();
        browseInputDir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        outputDirectoryTextField = new javax.swing.JTextField();
        browseOutputDir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        baseFileNameTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        suffixTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();

        setTitle(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("XLIFF_Document_Merging_Preferences"));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setMnemonic('O');
        okButton.setText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("OK"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setMnemonic('C');
        cancelButton.setText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("Cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("Input_directory:____"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jLabel1, gridBagConstraints);

        inputDirectoryTextField.setColumns(24);
        inputDirectoryTextField.setToolTipText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("Directory_to_look_in_for_input_files"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 15, 3, 15);
        jPanel6.add(inputDirectoryTextField, gridBagConstraints);

        browseInputDir.setText("...");
        browseInputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputDirActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel6.add(browseInputDir, gridBagConstraints);

        jLabel2.setText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("Output_directory:_"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jLabel2, gridBagConstraints);

        outputDirectoryTextField.setColumns(24);
        outputDirectoryTextField.setToolTipText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("The_Directory_to_put_the_output_file_in"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 15, 3, 15);
        jPanel6.add(outputDirectoryTextField, gridBagConstraints);

        browseOutputDir.setText("...");
        browseOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputDirActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel6.add(browseOutputDir, gridBagConstraints);

        jLabel3.setText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("Base_file_name:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jLabel3, gridBagConstraints);

        baseFileNameTextField.setColumns(30);
        baseFileNameTextField.setToolTipText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("The_name_of_the_original_XLIFF_file"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 15, 3, 15);
        jPanel6.add(baseFileNameTextField, gridBagConstraints);

        jLabel4.setText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("Suffix:_"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jLabel4, gridBagConstraints);

        suffixTextField.setColumns(20);
        suffixTextField.setToolTipText(org.jvnet.olt.editor.util.Bundle.getBundle("org/jvnet/olt/editor/filesplit/XliffMergingPrefsDialog").getString("The_suffix_used_in_the_split_XLIFF_files"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 15, 3, 15);
        jPanel6.add(suffixTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.2;
        jPanel6.add(jPanel1, gridBagConstraints);

        getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-442)/2, (screenSize.height-259)/2, 442, 259);
    }// </editor-fold>//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        handleCancelButton();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        handleOkButton();
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void browseOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputDirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        WritableDirectoryFileFilter dirFilter = new WritableDirectoryFileFilter();
        
        fileChooser.addChoosableFileFilter(dirFilter);
        fileChooser.setFileFilter(dirFilter);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setCurrentDirectory(null);
        
        int iReturn = fileChooser.showDialog(this, "Select");
        if(iReturn == JFileChooser.APPROVE_OPTION) {
            outputDirectoryTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_browseOutputDirActionPerformed
    
    private void browseInputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInputDirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        XliffMergeDirectoryFileFilter dirFilter = new XliffMergeDirectoryFileFilter();
        
        fileChooser.addChoosableFileFilter(dirFilter);
        fileChooser.setFileFilter(dirFilter);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setCurrentDirectory(null);
        
        int iReturn = fileChooser.showDialog(this, "Select");
        if(iReturn == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            if(selectedFile.isDirectory()) {
                inputDirectoryTextField.setText(selectedFile.getAbsolutePath());
            } else {
                String message = "The input location selected is not a readable directory. Please select a readable directory.";
                JOptionPane.showMessageDialog(this, message, "Invalid form values", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_browseInputDirActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        handleCancelButton();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new XliffMergingPrefsDialog(new JFrame(), true).show();
        System.exit(0);
    }
    
    protected void handleOkButton() {
        //  Set the defaults
        defaultFileName = baseFileNameTextField.getText();
        defaultSuffix = suffixTextField.getText();
        defaultInputDir = inputDirectoryTextField.getText();
        defaultOutputDir = outputDirectoryTextField.getText();
        
        File inputDir = new File(defaultInputDir);
        File outputDir = new File(defaultOutputDir);
        //boolean formInputOkay = false;
        
        if(testFormValues(inputDir, outputDir, defaultFileName, defaultSuffix)) {
            mergePreferences = new XliffMergingPrefs();
            mergePreferences.setInputDir(inputDir);
            mergePreferences.setOutputDir(outputDir);
            mergePreferences.setBaseFileName(defaultFileName);
            mergePreferences.setSuffix(defaultSuffix);
            
            setVisible(false);
            dispose();
        }
    }
    
    protected void handleCancelButton() {
        setVisible(false);
        dispose();
    }
    
    protected boolean testFormValues(File inputDir, File outputDir, java.lang.String baseFileName, java.lang.String suffix) {
        String message = "";
        if( !(inputDir.exists() && inputDir.isDirectory() && inputDir.canRead()) ) {
            //  Display error message
            message = "The input directory chosen is not a readable directory. Please select a readable directory.";
            JOptionPane.showMessageDialog(this, message, "Invalid form values", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if( !(outputDir.exists() && outputDir.isDirectory() && outputDir.canWrite()) ) {
            //  Display error message
            message = "The output location selected is not a writable directory. Please select a writable directory.";
            JOptionPane.showMessageDialog(this, message, "Invalid form values", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        //  maintenance note: it may be necessary to put tests in here for the
        //  filename and the suffix.
        
        if ( !(baseFileName.lastIndexOf('.') != -1) ) {
            //  Display error message
            message = "The base file name is not valid. Please enter a valid name.";
            JOptionPane.showMessageDialog(this, message, "Invalid form values", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }
    
    /** Getter for property mergePreferences.
     * @return Value of property mergePreferences.
     */
    public XliffMergingPrefs getMergePreferences() {
        return this.mergePreferences;
    }
    
    public void setDefaultInputDir(java.lang.String inputDirName) {
        defaultInputDir = inputDirName;
    }
    
    public void setDefaultSuffix(java.lang.String suffix) {
        defaultSuffix = suffix;
    }
    
    public void setDefaultFileName(java.lang.String fileName) {
        defaultFileName = fileName;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField baseFileNameTextField;
    private javax.swing.JButton browseInputDir;
    private javax.swing.JButton browseOutputDir;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField inputDirectoryTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField outputDirectoryTextField;
    private javax.swing.JTextField suffixTextField;
    // End of variables declaration//GEN-END:variables
    
    
}
