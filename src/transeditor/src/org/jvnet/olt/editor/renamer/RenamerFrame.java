/*
* CDDL HEADER START
*
* The contents of this file are subject to the terms of the
* Common Development and Distribution License (the "License").
* You may not use this file except in compliance with the License.
*
* You can obtain a copy of the license at LICENSE.txt
* or http://www.opensource.org/licenses/cddl1.php.
* See the License for the specific language governing permissions
* and limitations under the License.
*
* When distributing Covered Code, include this CDDL HEADER in each
* file and include the License file at LICENSE.txt.
* If applicable, add the following below this CDDL HEADER, with the
* fields enclosed by brackets "[]" replaced with your own identifying
* information: Portions Copyright [yyyy] [name of copyright owner]
*
* CDDL HEADER END
*/
/*
 * RenamerFrame.java
 *
 * Created on September 6, 2006, 3:20 PM
 */

package org.jvnet.olt.editor.renamer;

import java.awt.FileDialog;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.JFileChooser;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

/**
 
 @author  boris
 */
public class RenamerFrame extends javax.swing.JFrame {
    
    FileNameMatcher.Callback callback;
    
    class ReportingCallback implements FileNameMatcher.Callback{
        final String replacer;

        private boolean doStop = false;
        
        ReportingCallback(String replacer ){
            this.replacer = replacer;
        }
        
        public void warning(final String s) {
            log("WARN:"+s+"\n");
        }

        public void info(final String s) {
            log("INFO:"+s+"\n");
        }

        public void execute(final File f,final Matcher m) {
            
            
            log("NOT RENAMING:"+f.getPath()+" TO "+ calculateNewName(f,m)+"\n");
        }
        
        String calculateNewName(final File f,final Matcher m){
            return m.replaceAll(replacer);            
        }
        
        
        
        
        void log(final String s){
            try{
                SwingUtilities.invokeAndWait(new Runnable(){
                    public void run() {
                        logWindow.append(s);
                    }                
                }); 
            }
            catch (Exception ie){
                
            }
        }

        public void done() {
            renameButton.setEnabled(true);
            testButton.setEnabled(true);
            closeButton.setEnabled(true);
            stopButton.setEnabled(false);
        }

        public void start() {
            renameButton.setEnabled(false);
            testButton.setEnabled(false);
            closeButton.setEnabled(false);
            stopButton.setEnabled(true);
        }

        synchronized public void stop() {
            this.doStop = true;
        }

        
        synchronized public boolean getStop() {
            return this.doStop;
        }
        
        
        
    }
    
    class RenamingCallback extends ReportingCallback {
        
        RenamingCallback(String renamer){
            super(renamer);
        }
        
        public void execute(final File f, final Matcher m) {
            String newName = calculateNewName(f,m);
            log("INFO: renaming to "+newName);
            if(f.renameTo(new File(newName))){
                info("SUCCESS");
            }
            else{
                info("*** FAILED ***");
            }
        }
        
    }
    
    /** Creates new form RenamerFrame */
    public RenamerFrame() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     initialize the form.
     WARNING: Do NOT modify this code. The content of this method is
     always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        renameButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        matchTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        renameTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logWindow = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        testButton = new javax.swing.JButton();
        dirSelectButton = new javax.swing.JButton();
        pathTextField = new javax.swing.JTextField();
        stopButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jLabel1.setText("Path:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jLabel1, gridBagConstraints);

        renameButton.setText("Rename");
        renameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(renameButton, gridBagConstraints);

        jLabel2.setText("Match filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jLabel2, gridBagConstraints);

        matchTextField.setText("^(.*).properties$");
        matchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                matchTextFieldKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 10);
        getContentPane().add(matchTextField, gridBagConstraints);

        jLabel3.setText("Rename to:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jLabel3, gridBagConstraints);

        renameTextField.setText("$1_LOCALE.properties");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 10);
        getContentPane().add(renameTextField, gridBagConstraints);

        jPanel1.setLayout(new java.awt.BorderLayout());

        logWindow.setColumns(20);
        logWindow.setRows(5);
        jScrollPane1.setViewportView(logWindow);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel2.add(closeButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel2, gridBagConstraints);

        testButton.setText("Test");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(testButton, gridBagConstraints);

        dirSelectButton.setText("...");
        dirSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dirSelectButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 10);
        getContentPane().add(dirSelectButton, gridBagConstraints);

        pathTextField.setText("path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 0);
        getContentPane().add(pathTextField, gridBagConstraints);

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(stopButton, gridBagConstraints);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusLabel.setText("Status:");
        jPanel3.add(statusLabel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if(callback != null)
            callback.stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        System.exit(1);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void dirSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dirSelectButtonActionPerformed
        JFileChooser fdlg = new JFileChooser();
        
        fdlg.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        
        int ret = fdlg.showOpenDialog(this);
        
        if(ret == JFileChooser.APPROVE_OPTION){
            pathTextField.setText(fdlg.getSelectedFile().getPath());
        }
        
    }//GEN-LAST:event_dirSelectButtonActionPerformed

    private void matchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matchTextFieldKeyReleased
        compilePattern(matchTextField.getText());
    }//GEN-LAST:event_matchTextFieldKeyReleased

    Pattern compilePattern(String pattern){
        try{
            if(pattern == null){
                reportError("Match pattern is empty");
                return null;
            }
        
            reportError("");
            return  Pattern.compile(pattern) ;
            
        }
        catch (PatternSyntaxException pse){
            reportError("Pattern has errors at possition "+pse.getIndex()+":"+pse.getMessage());
        }
        
        return null;
    }
    
    File getRoot(String root){
        if(root == null){
            reportError("The path is missing");
            return null;
        }
            
        reportError("");
        return new File(root);
    }
    
    
    void reportError(String str){
        if(str == null || "".equals(str))
            str = "Status: OK";
        statusLabel.setText(str);
    }
    
    
    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        final Pattern p = compilePattern(matchTextField.getText());

        if(p == null)
            return ;
        
        if(pathTextField.getText() == null)
            return ;
        
        final File f = getRoot(pathTextField.getText());
        
        if(f == null)
            return ;
        
        final String repl = renameTextField.getText();
        
        FileNameMatcher.Callback callback2 = null;
        if(evt.getSource() == testButton)
            callback2 = new ReportingCallback(repl);
        else
            callback2 = new RenamingCallback(repl);
                                   
        this.callback = callback2;
        
        new Thread(new Runnable(){
            public void run() {
                
                callback.start();
                
                new FileNameMatcher(p).walk(f, callback);
                
                callback.done();
            }
            
        }).start();        // TODO add your handling code here:
    }//GEN-LAST:event_testButtonActionPerformed

    private void renameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameButtonActionPerformed
        testButtonActionPerformed(evt);
    }//GEN-LAST:event_renameButtonActionPerformed
    
    /**
     @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RenamerFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton dirSelectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logWindow;
    private javax.swing.JTextField matchTextField;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JButton renameButton;
    private javax.swing.JTextField renameTextField;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton testButton;
    // End of variables declaration//GEN-END:variables

    public void setEnabled(boolean b) {
    }
    
}
