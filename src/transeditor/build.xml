<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="all" name="translation editor 4">
    <import file="../../common.xml"/>

    <buildnumber file="build.version.properties"/>
    <property name="editor.dest.dir" value="${dest.dir}/transeditor4/"/>
    <property name="installer.dir" value="${editor.dest.dir}/installer/"/>

    <propertyfile file="single-test.properties"/>

    
    <path id="build.classpath">
        <path refid="deps.common.util"/>
        <path refid="deps.filters"/>
        <path refid="deps.backconv"/>
        <path refid="deps.swing-layout"/>
        <path refid="deps.saxon"/>
    </path>

    <path id="test.src">
        <path location="test"/>
    </path>
    <fileset id="test.srcfiles" dir="test">
        <include name="**/*Test.java"/>
    </fileset>
    <path id="test.classpath">
        <path refid="build.classpath"/>
        <path refid="deps.junit"/>
        <path refid="test.src"/>
        <path location="${build.dir}" />
        <path location="${build.dir}/resources"/>
        <path location="test-data"/>
        <path location="src"/>
    </path>
    <path id="run.classpath">
        <path refid="build.classpath"/>
        <path location="${build.dir}"/>
        <path location="${editor.dest.dir}/i18n"/>
        <path location="${build.dir}/resources"/>
        <path location="${installer.dir}"/>
    </path>

    <!-- dependency tracking see init target-->
    <!-- TODO: Separate tasks which are actually not dependent on
    the complete build flow but have been made so to simply the build -->

<!--
    <property name="dtd.dir" value="../..//dtd"/>
-->
    <property name="ext-res.dir" value="../../external/resources"/>
    
    <property name="build.staging.dir" value="${build.dir}/staging"/>
    <property name="build.dir.setup" value="${build.dir}/transtech-build/setup"/>
    <property name="tmx-conv.dir" value="../../src/backconverters/xliff_tmx_converter"/>
    <property name="built.lib.dir" value="./jars"/>
    <property name="webmod.app.dir" value="web_mod/app"/>

    <target name="init" depends="common.init">
        <echo message="Using build directory ${build.dir}"/>
        <mkdir dir="${editor.dest.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/resources"/>
        <mkdir dir="${editor.dest.dir}/i18n"/>
        <mkdir dir="${installer.dir}"/>
		
        <!-- we're really really REALLY lazy here. We'll build utilities,filters
        and backconv only if we can't find required stuff from backconverters.
        see the deps.backconv target    	
        -->
        <available 
        file="${dest.dir}/filters-editor.jar"
        property="do.build.deps"/>
    </target>


    <target name="pre-compile" depends="common.pre-compile">
        <echo>Setting editor version to: ${build.version}</echo>
        <echo>I copy the original Constants.java  file to Constants.java_ file then change the version and write back to Constants.java</echo>
        <copy file="src/org/jvnet/olt/editor/translation/Constants.java" 
        tofile="src/org/jvnet/olt/editor/translation/Constants.java_"
        overwrite="true"/>
		
        <copy file="src/org/jvnet/olt/editor/translation/Constants.java_" 
            tofile="src/org/jvnet/olt/editor/translation/Constants.java"
            overwrite="true">
            <filterset>
                <filter token="VERSION" value="${build.version}"/>
            </filterset>
        </copy>
    </target>

    <target name="compile" depends="init,pre-compile,deps,common.compile">
        <echo>restoring Constants.java</echo>
        <copy file="src/org/jvnet/olt/editor/translation/Constants.java_" 
        tofile="src/org/jvnet/olt/editor/translation/Constants.java"
        overwrite="true"/>
        <delete file="src/org/jvnet/olt/editor/translation/Constants.java_"/> 
		
        <copy todir="${build.dir}" verbose="true">
            <fileset dir="./static/resources" includes="spellchecker.properties"/>
        </copy>
                
        <copy todir="${build.dir}/resources" verbose="true">
            <fileset dir="./static/resources"/>
        </copy>
        
        <echo>Build dir: ${build.dir}</echo>
        <copy todir="${editor.dest.dir}/i18n" verbose="true" overwrite="true">
            <fileset dir="src">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        
        <copy todir="${editor.dest.dir}/i18n" verbose="true" overwrite="true">
            <mapper type="regexp" from="^[a-z][a-z]_[A-Z][A-Z](.*)$$" to="\1"/>
            <fileset dir="i18n">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        
        <copy todir="${build.dir}/resources">

            <fileset dir="${ext-res.dir}">
                <include name="**/*"/>
            </fileset>

            <fileset dir="${tmx-conv.dir}/src/resource/">
                <include name="xsl/xliff-tmx.xsl"/>
                <include name="xsl/xliff-tmx_MN.xsl"/>
            </fileset>
        </copy>
    </target>

    <!-- build dependencies -->
    <target name="deps" unless="do.build.deps">
        <ant dir="../../utilities">
            <property name="do.build.editor" value="please"/>
        </ant>
        <ant dir="../filters">
            <property name="do.build.editor" value="please"/>
        </ant>
        <ant dir="../backconverters" target="all">
            <property name="do.build.editor" value="please"/>
        </ant>
    </target>

    <target name="dist" depends="common.dist">
        <!-- mksetup -->
        <jar jarfile="${installer.dir}/EditorSetup.jar">
            <fileset dir="${build.dir}" includes="org/jvnet/olt/editor/setup/"/>
        </jar>

        <mkdir dir="${installer.dir}/mini-tm"/>
        <mkdir dir="${installer.dir}/downloads/"/>
        <mkdir dir="${installer.dir}/classes"/>
        <mkdir dir="${installer.dir}/samples"/>
        <mkdir dir="${installer.dir}/i18n"/>
        <mkdir dir="${installer.dir}/plugins"/>
        <mkdir dir="${installer.dir}/plugins/resources"/>

        <copy file="${dest.dir}/backconv.jar" verbose="true" tofile="${installer.dir}/classes/XliffBackConverter.jar"/>
        <copy file="${dest.dir}/utilities-fuzzytm.jar" verbose="true" tofile="${installer.dir}/classes/fuzzytm.jar"/>
        <copy file="${extlib.dir}/dom4j-161.jar" verbose="true" todir="${installer.dir}/classes/"/>
        <copy file="${extlib.dir}/swing-layout/swing-layout-1.0.4.jar" verbose="true" todir="${installer.dir}/classes/"/>
        <copy file="${extlib.dir}/saxon/saxon9he.jar" verbose="true" todir="${installer.dir}/classes/"/>
        <copy file="installer/README.i18n.txt" verbose="true" todir="${installer.dir}/i18n/"/>
        <copy file="installer/plugins/README.txt" verbose="true" todir="${installer.dir}/plugins/"/>
        
        <copy todir="${installer.dir}" verbose="true">
            <fileset dir="installer">
                <include name="*.properties"/>
                <include name="*.ico"/>
                <include name="*.bat"/>
                <include name="*.sh"/>
                <include name="shortcuts_*.xml"/>
                <include name="install_*.xml"/>
                <include name="*.desktop"/>
                <exclude name="README.i18n.txt"/>
            </fileset>
        </copy>
		
        <copy todir="${installer.dir}" verbose="true" file="static/resources/LICENSE.txt"/>
        <copy todir="${installer.dir}" verbose="true" file="../../external/THIRDPARTYREADME"/>
        <copy todir="${installer.dir}/samples" verbose="true">
            <fileset dir="samples"/>
        </copy>
	
        <chmod file="${installer.dir}/translation.sh" perm="ugo+rx"/>
        <chmod file="${installer.dir}/renamer.sh" perm="ugo+rx"/>

        <!-- first unzip filters.jar and then zip it with editor -->
        <unzip src="${dest.dir}/filters-editor.jar" dest="${build.dir}"/>
        <unzip src="${dest.dir}/utilities-editor.jar" dest="${build.dir}"/>
        
        <jar jarfile="${installer.dir}/TransEditor.jar">
            <fileset dir="${build.dir}">
			
                <include name="org/jvnet/olt/editor/backconv/"/>
                <include name="org/jvnet/olt/parsers/sgmltokens/"/>
                <include name="org/jvnet/olt/util/"/>
                <include name="org/jvnet/olt/io/"/>
                <include name="org/jvnet/olt/parsers/SgmlDocFragmentParser/"/>
                <include name="org/jvnet/olt/editor/commands/"/>
                <include name="org/jvnet/olt/editor/filefilters/"/>
                <include name="org/jvnet/olt/editor/filesplit/"/>
                <include name="org/jvnet/olt/editor/minitm/"/>
                <include name="org/jvnet/olt/editor/model/"/>
                <include name="org/jvnet/olt/editor/online/"/>
                <include name="org/jvnet/olt/editor/setup/"/>
                <include name="org/jvnet/olt/editor/spellchecker/"/>
                <include name="org/jvnet/olt/editor/translation/"/>
                <include name="org/jvnet/olt/editor/util/"/>
                <include name="org/jvnet/olt/alignment/"/>
                <include name="org/jvnet/olt/backconv/"/>
                <include name="org/jvnet/olt/editor/format/"/>
                <include name="org/jvnet/olt/editor/format/sgml/"/>
                <include name="org/jvnet/olt/editor/format/swmsg/"/>
                <include name="org/jvnet/olt/filters/xml/"/>
                <include name="org/jvnet/olt/format/"/>
                <include name="org/jvnet/olt/format/brokensgml/"/>
                <include name="org/jvnet/olt/format/messageformat/"/>
                <include name="org/jvnet/olt/format/plaintext/"/>
                <include name="org/jvnet/olt/format/printf/"/>
                <include name="org/jvnet/olt/format/sgml/"/>
                <include name="org/jvnet/olt/format/sgml/tmx/"/>
                <include name="org/jvnet/olt/io/"/>
                <include name="org/jvnet/olt/laxparsers/sgml/"/>
                <include name="org/jvnet/olt/laxparsers/software/"/>
                <include name="org/jvnet/olt/parsers/MessageFormatParser/"/>
                <include name="org/jvnet/olt/parsers/PrintfParser/"/>
                <include name="org/jvnet/olt/parsers/XmlDocFragmentParser/"/>
                <include name="org/jvnet/olt/so_back_converter/"/>
                <include name="org/jvnet/olt/util/"/>
                <include name="org/jvnet/olt/xliff/"/>
                <include name="org/jvnet/olt/xliff/mrk/"/>
                <include name="org/jvnet/olt/filters/NonConformantSgmlDocFragmentParser/"/>
                <include name="org/jvnet/olt/filters/html/"/>
                <include name="org/jvnet/olt/filters/jsp/"/>
                <include name="org/jvnet/olt/filters/sgml/docbook/"/>
                <include name="org/jvnet/olt/filters/xmlmerge/"/>
                <include name="org/jvnet/olt/parsers/tagged/"/>
                <include name="org/jvnet/olt/utilities/"/>
                <include name="org/jvnet/olt/xliff/"/>
                <include name="org/jvnet/olt/xliffparser/"/>
                <include name="org/jvnet/olt/xlifftools/"/>
                <include name="org/jvnet/olt/editor/renamer/"/>

                <!-- include stuff from filters -->
                <include name="org/jvnet/olt/tmci/"/>
                <include name="org/jvnet/olt/filters/software/"/>
                <include name="org/jvnet/olt/io/"/>
                <include name="org/jvnet/olt/parsers/"/>
            </fileset>
            <fileset dir="${editor.dest.dir}/i18n">
                <include name="**/*.properties"/>
            </fileset>
        </jar>

        <jar jarfile="${installer.dir}/resources.jar">
            <fileset dir="${build.dir}/resources">
                <include name="**"/>
            </fileset>
        </jar>

        <!-- i18n stuff -->
        <zip destfile="${installer.dir}/i18n/i18n.zip">
             <fileset dir="src" includes="**/*.properties"/>
        </zip>
        
        <!-- unzip spellchecker -->
		
        <!-- we unzip spellchecker for solaris into installer root so that we can test from that dir
        the win spellchecker is in spellchecker-win 
        -->
        <mkdir dir="${installer.dir}/spellchecker-win"/>
        <unzip src="spellchecker_bin/solaris-spellcheck.zip" dest="${installer.dir}" overwrite="false"/>
        <unzip src="spellchecker_bin/windows-spellchecker.zip" dest="${installer.dir}/spellchecker-win" overwrite="false"/>

        <!-- make aspell runnable/readable -->
        <chmod file="${installer.dir}/spellchecker/bin/aspell" perm="ugo+x"/>
        <chmod dir="${installer.dir}/spellchecker" includes="**" perm="ugo+rw" type="both"/>

        <!-- documentation -->
        <copy file="${common.basedir}/doc/user_doc/OLT_XLIFF_Translation_Editor_Manual.pdf" tofile="${installer.dir}/OLT_XLIFF_Translation_Editor_Manual_${build.version.flat}.pdf"/>

        <!-- set product version number in installer files -->
        <replace dir="${installer.dir}" token="@VERSION@" value="${build.version}">
            <include name="install_*.xml"/>
            <include name="shortcuts_*.xml"/>
        </replace>
        <replace dir="${installer.dir}" token="@VERSION_FLAT@" value="${build.version.flat}">
            <include name="install_*.xml"/>
            <include name="shortcuts_*.xml"/>
            <include name="install.*"/>
        </replace>

        <echo>Building Lite installer for Windows</echo>
        <izpack input="${installer.dir}/install_windows_lite.xml"
        output="${dest.dir}/transeditor_v${build.version.flat}_lite_win.jar"
        installerType="standard"
        basedir="${installer.dir}"
        izPackDir="${IZPACK_HOME}"/>
		
        <echo>Building Lite installer for Solaris</echo>
        <izpack input="${installer.dir}/install_solaris_lite.xml"
        output="${dest.dir}/transeditor_v${build.version.flat}_lite_unix.jar"
        installerType="standard"
        basedir="${installer.dir}"
        izPackDir="${IZPACK_HOME}"/>

        <echo>Building installer for Windows</echo>
        <izpack input="${installer.dir}/install_windows.xml"
        output="${dest.dir}/transeditor_v${build.version.flat}_win.jar"
        installerType="standard"
        basedir="${installer.dir}"
        izPackDir="${IZPACK_HOME}"/>
		
        <echo>Building installer for Solaris</echo>
        <izpack input="${installer.dir}/install_solaris.xml"
        output="${dest.dir}/transeditor_v${build.version.flat}_unix.jar"
        installerType="standard"
        basedir="${installer.dir}"
        izPackDir="${IZPACK_HOME}"/>

        <!-- ANY OTHER PLATFORMS -->
        <!--
        <echo>Building installer for Other</echo>
        <izpack input="installer/install_other.xml"
        output="${dest.dir}/transeditor_v4_5_other.jar"
        installerType="standard"
        basedir="${installer.dir}"
        izPackDir="${IZPACK_HOME}"/>
        -->
		
        <zip destfile="${dest.dir}/transeditor_v${build.version.flat}_win.zip">
            <zipfileset dir="${dest.dir}" includes="transeditor_v${build.version.flat}_win.jar"/>
            <zipfileset dir="${installer.dir}" includes="install.bat" />
        </zip>
        <tar destfile="${dest.dir}/transeditor_v${build.version.flat}_unix.tar.gz" compression="gzip">
            <tarfileset dir="${dest.dir}" includes="transeditor_v${build.version.flat}_unix.jar" mode="555"/>
            <tarfileset dir="${installer.dir}" includes="install.sh" mode="755"/>
        </tar>
    </target>

    <target name="clean" depends="common.clean">
        <delete dir="${editor.dest.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="run" depends="compile">
        <copy tofile="${installer.dir}/logging.debug.properties" verbose="true" file="logging.properties" overwrite="no"/>

        <java 
            classpathref="run.classpath" 
            fork="yes" 
            dir="${installer.dir}"
            classname="org.jvnet.olt.editor.translation.TransEditor">
            <!--classname="org.jvnet.olt.editor.renamer.Renamer -->
            <!--classname="org.jvnet.olt.editor.backconv.SGMLOptionsPanel" -->
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${test.debug.port}"/>
			
            <jvmarg value="-Xmx512M"/>                        
            <sysproperty key="java.util.logging.config.file" value="logging.debug.properties"/>
            <!-- sysproperty key="swing.defaultlaf" value="com.sun.java.swing.plaf.gtk.GTKLookAndFeel"/-->
            <sysproperty key="editor_home" value="${installer.dir}"/>
        </java>
		
    </target>
        	
    <!-- the targets below are not guaranteed to work -->

    <target name="nightly" depends="all">
        <tstamp/>
        <ant target="upload">
            <property name="path.to.file" value="${dest.dir}/transeditor_v${build.version.flat}_lite_unix.jar"/>
            <property name="uploaded.file.name" value="transeditor_nightly-${DSTAMP}_lite_unix.jar"/>
            <property name="uploaded.file.dir" value="/Releases/Unstable"/>
            <property name="uploaded.file.description" value="XLIFF Translation Editor nightly build ${DSTAMP} UNIX"/>
        </ant>
        <ant target="upload">
            <property name="path.to.file" value="${dest.dir}/transeditor_v${build.version.flat}_lite_win.jar"/>
            <property name="uploaded.file.name" value="transeditor_nightly-${DSTAMP}_lite_win.jar"/>
            <property name="uploaded.file.dir" value="/Releases/Unstable"/>
            <property name="uploaded.file.description" value="XLIFF Translation Editor nightly build ${DSTAMP} Windows"/>
        </ant>
    </target>
	 
    <target name="rc">
        <ant target="upload">
            <property name="path.to.file" value="${dest.dir}/transeditor_v${build.version.flat}_lite_unix.jar"/>
            <property name="uploaded.file.name" value="transeditor_v${build.version.flat}_lite_unix.jar"/>
            <property name="uploaded.file.dir" value="/Releases/preview"/>
            <property name="uploaded.file.description" value="XLIFF Translation Editor ${build.version.flat} Preview UNIX"/>
        </ant>
        <ant target="upload">
            <property name="path.to.file" value="${dest.dir}/transeditor_v${build.version.flat}_lite_win.jar"/>
            <property name="uploaded.file.name" value="transeditor_v${build.version.flat}_lite_win.jar"/>
            <property name="uploaded.file.dir" value="/Releases/preview"/>
            <property name="uploaded.file.description" value="XLIFF Translation Editor ${build.version.flat} Preview Windows"/>
        </ant>
        <ant target="upload">
            <property name="path.to.file" value="${dest.dir}/transeditor_v${build.version.flat}_unix.tar.gz"/>
            <property name="uploaded.file.name" value="transeditor_v${build.version.flat}_unix.tar.gz"/>
            <property name="uploaded.file.dir" value="/Releases/preview"/>
            <property name="uploaded.file.description" value="XLIFF Translation Editor ${build.version.flat} Preview UNIX"/>
        </ant>
        <ant target="upload">
            <property name="path.to.file" value="${dest.dir}/transeditor_v${build.version.flat}_win.zip"/>
            <property name="uploaded.file.name" value="transeditor_v${build.version.flat}_win.zip"/>
            <property name="uploaded.file.dir" value="/Releases/preview"/>
            <property name="uploaded.file.description" value="XLIFF Translation Editor ${build.version.flat} Preview Windows"/>
        </ant>
    </target>

</project>
