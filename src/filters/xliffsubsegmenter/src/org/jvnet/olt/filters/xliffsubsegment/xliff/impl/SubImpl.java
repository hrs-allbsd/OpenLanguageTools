
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.3-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.10.08 at 01:50:51 BST 
//


package org.jvnet.olt.filters.xliffsubsegment.xliff.impl;

public class SubImpl implements org.jvnet.olt.filters.xliffsubsegment.xliff.Sub, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallableObject, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializable, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.ValidatableObject
{

    protected java.lang.String _Datatype;
    protected java.lang.String _Ctype;
    protected com.sun.xml.bind.util.ListImpl _Content;
    public final static java.lang.Class version = (org.jvnet.olt.filters.xliffsubsegment.xliff.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (org.jvnet.olt.filters.xliffsubsegment.xliff.Sub.class);
    }

    public java.lang.String ____jaxb_ri____getNamespaceURI() {
        return "";
    }

    public java.lang.String ____jaxb_ri____getLocalName() {
        return "sub";
    }

    public java.lang.String getDatatype() {
        return _Datatype;
    }

    public void setDatatype(java.lang.String value) {
        _Datatype = value;
    }

    public java.lang.String getCtype() {
        return _Ctype;
    }

    public void setCtype(java.lang.String value) {
        _Ctype = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getContent() {
        if (_Content == null) {
            _Content = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Content;
    }

    public java.util.List getContent() {
        return _getContent();
    }

    public org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingEventHandler createUnmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context) {
        return new org.jvnet.olt.filters.xliffsubsegment.xliff.impl.SubImpl.Unmarshaller(context);
    }

    public void serializeBody(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx3 = 0;
        final int len3 = ((_Content == null)? 0 :_Content.size());
        context.startElement("", "sub");
        int idx_2 = idx3;
        while (idx_2 != len3) {
            {
                java.lang.Object o = _Content.get(idx_2);
                if (o instanceof com.sun.xml.bind.JAXBObject) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Content.get(idx_2 ++)), "Content");
                } else {
                    if (o instanceof java.lang.String) {
                        try {
                            idx_2 += 1;
                        } catch (java.lang.Exception e) {
                            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                        }
                    } else {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handleTypeMismatchError(context, this, "Content", o);
                    }
                }
            }
        }
        context.endNamespaceDecls();
        int idx_3 = idx3;
        if (_Ctype!= null) {
            context.startAttribute("", "ctype");
            try {
                context.text(((java.lang.String) _Ctype), "Ctype");
            } catch (java.lang.Exception e) {
                org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Datatype!= null) {
            context.startAttribute("", "datatype");
            try {
                context.text(((java.lang.String) _Datatype), "Datatype");
            } catch (java.lang.Exception e) {
                org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx_3 != len3) {
            {
                java.lang.Object o = _Content.get(idx_3);
                if (o instanceof com.sun.xml.bind.JAXBObject) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Content.get(idx_3 ++)), "Content");
                } else {
                    if (o instanceof java.lang.String) {
                        try {
                            idx_3 += 1;
                        } catch (java.lang.Exception e) {
                            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                        }
                    } else {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handleTypeMismatchError(context, this, "Content", o);
                    }
                }
            }
        }
        context.endAttributes();
        while (idx3 != len3) {
            {
                java.lang.Object o = _Content.get(idx3);
                if (o instanceof com.sun.xml.bind.JAXBObject) {
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _Content.get(idx3 ++)), "Content");
                } else {
                    if (o instanceof java.lang.String) {
                        try {
                            context.text(((java.lang.String) _Content.get(idx3 ++)), "Content");
                        } catch (java.lang.Exception e) {
                            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                        }
                    } else {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handleTypeMismatchError(context, this, "Content", o);
                    }
                }
            }
        }
        context.endElement();
    }

    public void serializeAttributes(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx3 = 0;
        final int len3 = ((_Content == null)? 0 :_Content.size());
    }

    public void serializeURIs(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx3 = 0;
        final int len3 = ((_Content == null)? 0 :_Content.size());
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.jvnet.olt.filters.xliffsubsegment.xliff.Sub.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsr\u0000\u001dcom.s"
+"un.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.g"
+"rammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq"
+"\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\u001bcom.sun."
+"msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/"
+"Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPai"
+"r;xq\u0000~\u0000\u0004ppsr\u0000-com.sun.msv.datatype.xsd.NormalizedStringType\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001"
+"Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicTy"
+"pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L"
+"\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteS"
+"pacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 ht"
+"tp://www.w3.org/2001/XMLSchemat\u0000\u0010normalizedStringsr\u00004com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor$Replace\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,"
+"com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr"
+"\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalN"
+"ameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axpt\u0000\u0005CDATAt\u0000\u0000sr\u0000#com.sun.msv.gra"
+"mmar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespace"
+"URIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0005cty"
+"peq\u0000~\u0000\'sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000\u000f\u0001q\u0000~\u0000-sq\u0000~\u0000\u000bppsq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000\u0014sq\u0000~\u0000(t"
+"\u0000\bdatatypeq\u0000~\u0000\'q\u0000~\u0000-sr\u0000!com.sun.msv.grammar.InterleaveExp\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsq\u0000~\u0000\u000bppsr\u0000 com.sun.msv.grammar.OneOrMoreExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003exp"
+"q\u0000~\u0000\u0003xq\u0000~\u0000\u0004q\u0000~\u0000\u0010psq\u0000~\u0000\u0011q\u0000~\u0000\u0010psq\u0000~\u0000\u0016q\u0000~\u0000\u001dt\u0000\u0006stringsr\u00005com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000"
+"~\u0000 \u0001q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000;q\u0000~\u0000\u001dq\u0000~\u0000-sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\u000bq\u0000~\u0000"
+"\u0010psq\u0000~\u0000\u000bq\u0000~\u0000\u0010psq\u0000~\u0000\u000bq\u0000~\u0000\u0010psq\u0000~\u0000\u000bq\u0000~\u0000\u0010psq\u0000~\u0000\u000bq\u0000~\u0000\u0010psq\u0000~\u0000\u000bq\u0000~\u0000"
+"\u0010psq\u0000~\u0000\u000bq\u0000~\u0000\u0010psq\u0000~\u0000\u000bq\u0000~\u0000\u0010psq\u0000~\u0000\u0000q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010ps"
+"q\u0000~\u0000\rq\u0000~\u0000\u0010psr\u00002com.sun.msv.grammar.Expression$AnyStringExpre"
+"ssion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004q\u0000~\u0000.q\u0000~\u0000Nsr\u0000 com.sun.msv.grammar.AnyN"
+"ameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000)q\u0000~\u0000-sq\u0000~\u0000(t\u0000*com.sun.tt.filters.xl"
+"iffsubsegment.xliff.Gt\u0000+http://java.sun.com/jaxb/xjc/dummy-e"
+"lementssq\u0000~\u0000\u0000q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~"
+"\u0000Pq\u0000~\u0000-sq\u0000~\u0000(t\u0000,org.jvnet.olt.filters.xliffsubsegment.xliff.Bpt"
+"q\u0000~\u0000Ssq\u0000~\u0000\u0000q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~\u0000P"
+"q\u0000~\u0000-sq\u0000~\u0000(t\u0000,org.jvnet.olt.filters.xliffsubsegment.xliff.Eptq\u0000"
+"~\u0000Ssq\u0000~\u0000\u0000q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~\u0000Pq\u0000"
+"~\u0000-sq\u0000~\u0000(t\u0000+org.jvnet.olt.filters.xliffsubsegment.xliff.Phq\u0000~\u0000S"
+"sq\u0000~\u0000\u0000q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~\u0000Pq\u0000~\u0000-"
+"sq\u0000~\u0000(t\u0000+org.jvnet.olt.filters.xliffsubsegment.xliff.Itq\u0000~\u0000Ssq\u0000"
+"~\u0000\u0000q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~\u0000Pq\u0000~\u0000-sq\u0000"
+"~\u0000(t\u0000,org.jvnet.olt.filters.xliffsubsegment.xliff.Mrkq\u0000~\u0000Ssq\u0000~\u0000"
+"\u0000q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~\u0000Pq\u0000~\u0000-sq\u0000~\u0000"
+"(t\u0000*org.jvnet.olt.filters.xliffsubsegment.xliff.Xq\u0000~\u0000Ssq\u0000~\u0000\u0000q\u0000~"
+"\u0000\u0010p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~\u0000Pq\u0000~\u0000-sq\u0000~\u0000(t\u0000+"
+"org.jvnet.olt.filters.xliffsubsegment.xliff.Bxq\u0000~\u0000Ssq\u0000~\u0000\u0000q\u0000~\u0000\u0010p"
+"\u0000sq\u0000~\u0000\u000bppsq\u0000~\u00006q\u0000~\u0000\u0010psq\u0000~\u0000\rq\u0000~\u0000\u0010pq\u0000~\u0000Nq\u0000~\u0000Pq\u0000~\u0000-sq\u0000~\u0000(t\u0000+com"
+".sun.tt.filters.xliffsubsegment.xliff.Exq\u0000~\u0000Sq\u0000~\u0000-sq\u0000~\u0000(t\u0000\u0003s"
+"ubq\u0000~\u0000\'sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\be"
+"xpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xps"
+"r\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I"
+"\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expr"
+"essionPool;xp\u0000\u0000\u0000!\u0001pq\u0000~\u0000Eq\u0000~\u0000Fq\u0000~\u0000Bq\u0000~\u0000Aq\u0000~\u0000\nq\u0000~\u0000Cq\u0000~\u0000\fq\u0000~\u0000/q"
+"\u0000~\u00004q\u0000~\u0000Jq\u0000~\u0000Uq\u0000~\u0000[q\u0000~\u0000Gq\u0000~\u0000aq\u0000~\u0000gq\u0000~\u0000mq\u0000~\u0000sq\u0000~\u0000yq\u0000~\u0000\u007fq\u0000~\u0000Hq"
+"\u0000~\u0000\tq\u0000~\u0000?q\u0000~\u0000Dq\u0000~\u0000Kq\u0000~\u0000Vq\u0000~\u0000\\q\u0000~\u0000bq\u0000~\u0000hq\u0000~\u0000nq\u0000~\u0000tq\u0000~\u0000zq\u0000~\u0000\u0080q"
+"\u0000~\u0000@x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context) {
            super(context, "---------");
        }

        protected Unmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return org.jvnet.olt.filters.xliffsubsegment.xliff.impl.SubImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        attIdx = context.getAttribute("", "datatype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 7;
                            continue outer;
                        }
                        state = 7;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "ctype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 4;
                            continue outer;
                        }
                        state = 4;
                        continue outer;
                    case  0 :
                        if (("sub" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 1;
                            return ;
                        }
                        break;
                    case  7 :
                        if (("g" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.GImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.GImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("bpt" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BptImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BptImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ept" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.EptImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.EptImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ph" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PhImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PhImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("it" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ItImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ItImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("mrk" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.MrkImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.MrkImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("x" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.XImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.XImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("bx" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BxImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BxImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ex" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ExImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ExImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  8 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Datatype = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Ctype = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        attIdx = context.getAttribute("", "datatype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 7;
                            continue outer;
                        }
                        state = 7;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "ctype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 4;
                            continue outer;
                        }
                        state = 4;
                        continue outer;
                    case  7 :
                        if (("sub" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 8;
                            return ;
                        }
                        break;
                    case  8 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        if (("datatype" == ___local)&&("" == ___uri)) {
                            state = 5;
                            return ;
                        }
                        state = 7;
                        continue outer;
                    case  1 :
                        if (("ctype" == ___local)&&("" == ___uri)) {
                            state = 2;
                            return ;
                        }
                        state = 4;
                        continue outer;
                    case  8 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        attIdx = context.getAttribute("", "datatype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 7;
                            continue outer;
                        }
                        state = 7;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "ctype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 4;
                            continue outer;
                        }
                        state = 4;
                        continue outer;
                    case  6 :
                        if (("datatype" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("ctype" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  8 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  4 :
                            attIdx = context.getAttribute("", "datatype");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 7;
                                continue outer;
                            }
                            state = 7;
                            continue outer;
                        case  1 :
                            attIdx = context.getAttribute("", "ctype");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 4;
                                continue outer;
                            }
                            state = 4;
                            continue outer;
                        case  2 :
                            eatText2(value);
                            state = 3;
                            return ;
                        case  7 :
                            eatText3(value);
                            state = 7;
                            return ;
                        case  8 :
                            revertToParentFromText(value);
                            return ;
                        case  5 :
                            eatText1(value);
                            state = 6;
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _getContent().add(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
