
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.3-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.10.08 at 01:50:51 BST 
//


package org.jvnet.olt.filters.xliffsubsegment.xliff.impl;

public class HeaderImpl implements org.jvnet.olt.filters.xliffsubsegment.xliff.Header, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallableObject, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializable, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Content;
    public final static java.lang.Class version = (org.jvnet.olt.filters.xliffsubsegment.xliff.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (org.jvnet.olt.filters.xliffsubsegment.xliff.Header.class);
    }

    public java.lang.String ____jaxb_ri____getNamespaceURI() {
        return "";
    }

    public java.lang.String ____jaxb_ri____getLocalName() {
        return "header";
    }

    protected com.sun.xml.bind.util.ListImpl _getContent() {
        if (_Content == null) {
            _Content = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Content;
    }

    public java.util.List getContent() {
        return _getContent();
    }

    public org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingEventHandler createUnmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context) {
        return new org.jvnet.olt.filters.xliffsubsegment.xliff.impl.HeaderImpl.Unmarshaller(context);
    }

    public void serializeBody(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Content == null)? 0 :_Content.size());
        context.startElement("", "header");
        int idx_0 = idx1;
        while (idx_0 != len1) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Content.get(idx_0 ++)), "Content");
        }
        context.endNamespaceDecls();
        int idx_1 = idx1;
        while (idx_1 != len1) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Content.get(idx_1 ++)), "Content");
        }
        context.endAttributes();
        while (idx1 != len1) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Content.get(idx1 ++)), "Content");
        }
        context.endElement();
    }

    public void serializeAttributes(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Content == null)? 0 :_Content.size());
    }

    public void serializeURIs(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Content == null)? 0 :_Content.size());
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.jvnet.olt.filters.xliffsubsegment.xliff.Header.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsr\u0000\u001dcom.s"
+"un.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsq\u0000~\u0000\u0000sr\u0000\u0011java.la"
+"ng.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\u000bppsr\u0000 com.sun.msv.gr"
+"ammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0003xq\u0000~\u0000\u0004q\u0000~\u0000\u000fpsr\u0000 com.sun.msv.grammar.A"
+"ttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004q\u0000~\u0000"
+"\u000fpsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000\u000e\u0001q\u0000~\u0000\u0017sr\u0000 com.sun.msv.grammar.AnyNameClas"
+"s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr"
+"\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xq\u0000~\u0000\u0004q\u0000~\u0000\u0018q\u0000~\u0000\u001dsr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\u001f"
+"xq\u0000~\u0000\u001at\u0000,org.jvnet.olt.filters.xliffsubsegment.xliff.Sklt\u0000+http"
+"://java.sun.com/jaxb/xjc/dummy-elementsq\u0000~\u0000\u001dsq\u0000~\u0000\u000bppsq\u0000~\u0000\u0000q\u0000"
+"~\u0000\u000fp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0011q\u0000~\u0000\u000fpsq\u0000~\u0000\u0014q\u0000~\u0000\u000fpq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000"
+"3org.jvnet.olt.filters.xliffsubsegment.xliff.PhaseGroupq\u0000~\u0000\"q\u0000~"
+"\u0000\u001dsq\u0000~\u0000\u000bppsq\u0000~\u0000\u0011q\u0000~\u0000\u000fpsq\u0000~\u0000\u000bq\u0000~\u0000\u000fpsq\u0000~\u0000\u000bq\u0000~\u0000\u000fpsq\u0000~\u0000\u000bq\u0000~\u0000\u000fpsq"
+"\u0000~\u0000\u000bq\u0000~\u0000\u000fpsq\u0000~\u0000\u0000q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0011q\u0000~\u0000\u000fpsq\u0000~\u0000\u0014q\u0000~\u0000\u000fpq\u0000~\u0000\u0017"
+"q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00002org.jvnet.olt.filters.xliffsubsegment.xliff."
+"PropGroupq\u0000~\u0000\"sq\u0000~\u0000\u0000q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0011q\u0000~\u0000\u000fpsq\u0000~\u0000\u0014q\u0000~\u0000\u000fpq"
+"\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00001org.jvnet.olt.filters.xliffsubsegment.xl"
+"iff.Glossaryq\u0000~\u0000\"sq\u0000~\u0000\u0000q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0011q\u0000~\u0000\u000fpsq\u0000~\u0000\u0014q\u0000~\u0000"
+"\u000fpq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00002org.jvnet.olt.filters.xliffsubsegment"
+".xliff.Referenceq\u0000~\u0000\"sq\u0000~\u0000\u0000q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0011q\u0000~\u0000\u000fpsq\u0000~\u0000\u0014"
+"q\u0000~\u0000\u000fpq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000-com.sun.tt.filters.xliffsubseg"
+"ment.xliff.Noteq\u0000~\u0000\"sq\u0000~\u0000\u0000q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0011q\u0000~\u0000\u000fpsq\u0000~\u0000\u0014q"
+"\u0000~\u0000\u000fpq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00003com.sun.tt.filters.xliffsubsegm"
+"ent.xliff.CountGroupq\u0000~\u0000\"q\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000\u0006headert\u0000\u0000sr\u0000\"com.sun."
+"msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/"
+"msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gram"
+"mar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVer"
+"sionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0018\u0001p"
+"q\u0000~\u0000,q\u0000~\u0000-q\u0000~\u0000\nq\u0000~\u0000\fq\u0000~\u0000#q\u0000~\u0000+q\u0000~\u0000\u0010q\u0000~\u0000%q\u0000~\u00001q\u0000~\u00007q\u0000~\u0000=q\u0000~\u0000."
+"q\u0000~\u0000Cq\u0000~\u0000Iq\u0000~\u0000*q\u0000~\u0000/q\u0000~\u0000\tq\u0000~\u0000\u0013q\u0000~\u0000&q\u0000~\u00002q\u0000~\u00008q\u0000~\u0000>q\u0000~\u0000Dq\u0000~\u0000J"
+"x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context) {
            super(context, "------");
        }

        protected Unmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return org.jvnet.olt.filters.xliffsubsegment.xliff.impl.HeaderImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  1 :
                        if (("skl" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.SklImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.SklImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 2;
                        continue outer;
                    case  2 :
                        if (("phase-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PhaseGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PhaseGroupImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        if (("prop-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("glossary" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.GlossaryImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.GlossaryImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("reference" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ReferenceImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ReferenceImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("note" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("count-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.CountGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.CountGroupImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 4;
                        continue outer;
                    case  5 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  4 :
                        if (("prop-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("glossary" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.GlossaryImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.GlossaryImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("reference" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ReferenceImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ReferenceImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("note" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("count-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.CountGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.CountGroupImpl.class), 4, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  0 :
                        if (("header" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  1 :
                        state = 2;
                        continue outer;
                    case  2 :
                        state = 3;
                        continue outer;
                    case  3 :
                        state = 4;
                        continue outer;
                    case  5 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        if (("header" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 5;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  1 :
                        state = 2;
                        continue outer;
                    case  2 :
                        state = 3;
                        continue outer;
                    case  3 :
                        state = 4;
                        continue outer;
                    case  5 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  1 :
                        state = 2;
                        continue outer;
                    case  2 :
                        state = 3;
                        continue outer;
                    case  3 :
                        state = 4;
                        continue outer;
                    case  5 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  1 :
                            state = 2;
                            continue outer;
                        case  2 :
                            state = 3;
                            continue outer;
                        case  3 :
                            state = 4;
                            continue outer;
                        case  5 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
