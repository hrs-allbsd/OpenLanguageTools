
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.3-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.10.08 at 01:50:51 BST 
//


package org.jvnet.olt.filters.xliffsubsegment.xliff.impl;

public class BinUnitImpl implements org.jvnet.olt.filters.xliffsubsegment.xliff.BinUnit, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallableObject, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializable, org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.ValidatableObject
{

    protected java.lang.String _PhaseName;
    protected java.lang.String _MimeType;
    protected java.lang.String _Translate;
    protected java.lang.String _Reformat;
    protected java.lang.String _Ts;
    protected java.lang.String _Restype;
    protected java.lang.String _Resname;
    protected java.lang.String _Approved;
    protected com.sun.xml.bind.util.ListImpl _Content;
    protected java.lang.String _Id;
    public final static java.lang.Class version = (org.jvnet.olt.filters.xliffsubsegment.xliff.impl.JAXBVersion.class);
    private final static org.relaxng.datatype.Datatype ___dt0 = com.sun.xml.bind.unmarshaller.DatatypeDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0005L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001");
    private final static org.relaxng.datatype.Datatype ___dt1 = com.sun.xml.bind.unmarshaller.DatatypeDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0005L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001");
    private final static org.relaxng.datatype.Datatype ___dt2 = com.sun.xml.bind.unmarshaller.DatatypeDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0005L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001");
    private final static org.relaxng.datatype.Datatype ___dt3 = com.sun.xml.bind.unmarshaller.DatatypeDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0005L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001");
    private final static org.relaxng.datatype.Datatype ___dt4 = com.sun.xml.bind.unmarshaller.DatatypeDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0005L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001");
    private final static org.relaxng.datatype.Datatype ___dt5 = com.sun.xml.bind.unmarshaller.DatatypeDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0005L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001");
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (org.jvnet.olt.filters.xliffsubsegment.xliff.BinUnit.class);
    }

    public java.lang.String ____jaxb_ri____getNamespaceURI() {
        return "";
    }

    public java.lang.String ____jaxb_ri____getLocalName() {
        return "bin-unit";
    }

    public java.lang.String getPhaseName() {
        return _PhaseName;
    }

    public void setPhaseName(java.lang.String value) {
        _PhaseName = value;
    }

    public java.lang.String getMimeType() {
        return _MimeType;
    }

    public void setMimeType(java.lang.String value) {
        _MimeType = value;
    }

    public java.lang.String getTranslate() {
        return _Translate;
    }

    public void setTranslate(java.lang.String value) {
        _Translate = value;
    }

    public java.lang.String getReformat() {
        return _Reformat;
    }

    public void setReformat(java.lang.String value) {
        _Reformat = value;
    }

    public java.lang.String getTs() {
        return _Ts;
    }

    public void setTs(java.lang.String value) {
        _Ts = value;
    }

    public java.lang.String getRestype() {
        return _Restype;
    }

    public void setRestype(java.lang.String value) {
        _Restype = value;
    }

    public java.lang.String getResname() {
        return _Resname;
    }

    public void setResname(java.lang.String value) {
        _Resname = value;
    }

    public java.lang.String getApproved() {
        return _Approved;
    }

    public void setApproved(java.lang.String value) {
        _Approved = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getContent() {
        if (_Content == null) {
            _Content = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Content;
    }

    public java.util.List getContent() {
        return _getContent();
    }

    public java.lang.String getId() {
        return _Id;
    }

    public void setId(java.lang.String value) {
        _Id = value;
    }

    public org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingEventHandler createUnmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context) {
        return new org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BinUnitImpl.Unmarshaller(context);
    }

    public void serializeBody(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx9 = 0;
        final int len9 = ((_Content == null)? 0 :_Content.size());
        context.startElement("", "bin-unit");
        int idx_3 = idx9;
        if (_Approved!= null) {
            {
                java.lang.Object o = _Approved;
            }
        }
        if (_Reformat!= null) {
            {
                java.lang.Object o = _Reformat;
            }
        }
        if (_Translate!= null) {
            {
                java.lang.Object o = _Translate;
            }
        }
        while (idx_3 != len9) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Content.get(idx_3 ++)), "Content");
        }
        context.endNamespaceDecls();
        int idx_10 = idx9;
        if (_PhaseName!= null) {
            context.startAttribute("", "phase-name");
            try {
                context.text(((java.lang.String) _PhaseName), "PhaseName");
            } catch (java.lang.Exception e) {
                org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Resname!= null) {
            context.startAttribute("", "resname");
            try {
                context.text(((java.lang.String) _Resname), "Resname");
            } catch (java.lang.Exception e) {
                org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Approved!= null) {
            context.startAttribute("", "approved");
            {
                java.lang.Object o = _Approved;
                if (o instanceof java.lang.String) {
                    try {
                        context.text(((java.lang.String) _Approved), "Approved");
                    } catch (java.lang.Exception e) {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                    }
                } else {
                    if (o instanceof java.lang.String) {
                        try {
                            context.text(((java.lang.String) _Approved), "Approved");
                        } catch (java.lang.Exception e) {
                            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                        }
                    } else {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handleTypeMismatchError(context, this, "Approved", o);
                    }
                }
            }
            context.endAttribute();
        }
        if (_Ts!= null) {
            context.startAttribute("", "ts");
            try {
                context.text(((java.lang.String) _Ts), "Ts");
            } catch (java.lang.Exception e) {
                org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Reformat!= null) {
            context.startAttribute("", "reformat");
            {
                java.lang.Object o = _Reformat;
                if (o instanceof java.lang.String) {
                    try {
                        context.text(((java.lang.String) _Reformat), "Reformat");
                    } catch (java.lang.Exception e) {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                    }
                } else {
                    if (o instanceof java.lang.String) {
                        try {
                            context.text(((java.lang.String) _Reformat), "Reformat");
                        } catch (java.lang.Exception e) {
                            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                        }
                    } else {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handleTypeMismatchError(context, this, "Reformat", o);
                    }
                }
            }
            context.endAttribute();
        }
        if (_Translate!= null) {
            context.startAttribute("", "translate");
            {
                java.lang.Object o = _Translate;
                if (o instanceof java.lang.String) {
                    try {
                        context.text(((java.lang.String) _Translate), "Translate");
                    } catch (java.lang.Exception e) {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                    }
                } else {
                    if (o instanceof java.lang.String) {
                        try {
                            context.text(((java.lang.String) _Translate), "Translate");
                        } catch (java.lang.Exception e) {
                            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
                        }
                    } else {
                        org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handleTypeMismatchError(context, this, "Translate", o);
                    }
                }
            }
            context.endAttribute();
        }
        context.startAttribute("", "id");
        try {
            context.text(((java.lang.String) _Id), "Id");
        } catch (java.lang.Exception e) {
            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Restype!= null) {
            context.startAttribute("", "restype");
            try {
                context.text(((java.lang.String) _Restype), "Restype");
            } catch (java.lang.Exception e) {
                org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "mime-type");
        try {
            context.text(((java.lang.String) _MimeType), "MimeType");
        } catch (java.lang.Exception e) {
            org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        while (idx_10 != len9) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Content.get(idx_10 ++)), "Content");
        }
        context.endAttributes();
        while (idx9 != len9) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Content.get(idx9 ++)), "Content");
        }
        context.endElement();
    }

    public void serializeAttributes(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx9 = 0;
        final int len9 = ((_Content == null)? 0 :_Content.size());
    }

    public void serializeURIs(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx9 = 0;
        final int len9 = ((_Content == null)? 0 :_Content.size());
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.jvnet.olt.filters.xliffsubsegment.xliff.BinUnit.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
+"\u0007ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 c"
+"om.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tname"
+"Classq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p"
+"sr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relax"
+"ng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/ut"
+"il/StringPair;xq\u0000~\u0000\u0004ppsr\u0000-com.sun.msv.datatype.xsd.Normalize"
+"dStringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringTyp"
+"e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.Bui"
+"ltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concre"
+"teType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000"
+"~\u0000#L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProce"
+"ssor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0010normalizedStrin"
+"gsr\u00004com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Replace\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpressi"
+"on\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0"
+"\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespaceURIq\u0000~\u0000#xpt\u0000\u0005CDATAt\u0000\u0000sr\u0000#com"
+".sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#"
+"L\u0000\fnamespaceURIq\u0000~\u0000#xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xpt\u0000\nphase-nameq\u0000~\u00000sr\u00000com.sun.msv.grammar.Expression$E"
+"psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000\u0018\u0001q\u0000~\u00006sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0016q"
+"\u0000~\u0000\u0019pq\u0000~\u0000\u001dsq\u0000~\u00001t\u0000\u0007resnameq\u0000~\u00000q\u0000~\u00006sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0016q\u0000~\u0000\u0019psq\u0000~"
+"\u0000\u0014ppsr\u0000\u001ccom.sun.msv.grammar.ValueExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtq\u0000~\u0000\u001bL\u0000\u0004"
+"nameq\u0000~\u0000\u001cL\u0000\u0005valuet\u0000\u0012Ljava/lang/Object;xq\u0000~\u0000\u0004q\u0000~\u0000\u0019psr\u0000\"com.su"
+"n.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001fq\u0000~\u0000&t\u0000\u0005tokensr"
+"\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000)\u0001sq\u0000~\u0000-t\u0000\u000bENUMERATIONq\u0000~\u00000t\u0000\u0003yessq\u0000~\u0000?q\u0000~\u0000\u0019pq\u0000~\u0000"
+"Cq\u0000~\u0000Gt\u0000\u0002nosq\u0000~\u00001t\u0000\bapprovedq\u0000~\u00000q\u0000~\u00006sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000"
+"~\u0000\u001dsq\u0000~\u00001t\u0000\u0002tsq\u0000~\u00000q\u0000~\u00006sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000~\u0000>sq\u0000~\u00001t\u0000\bre"
+"formatq\u0000~\u00000q\u0000~\u00006sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000~\u0000>sq\u0000~\u00001t\u0000\ttranslateq"
+"\u0000~\u00000q\u0000~\u00006sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u001appsr\u0000$com.sun.msv.datatype.xsd.Nmtoke"
+"nType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Bq\u0000~\u0000&t\u0000\u0007NMTOKENq\u0000~\u0000F\u0000q\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000^q"
+"\u0000~\u00000sq\u0000~\u00001t\u0000\u0002idq\u0000~\u00000sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000~\u0000\u001dsq\u0000~\u00001t\u0000\u0007restyp"
+"eq\u0000~\u00000q\u0000~\u00006sq\u0000~\u0000\u0016ppq\u0000~\u0000[sq\u0000~\u00001t\u0000\tmime-typeq\u0000~\u00000sq\u0000~\u0000\u0000pp\u0000sq\u0000~"
+"\u0000\u0014ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.s"
+"un.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0003xq\u0000~\u0000\u0004q\u0000~\u0000\u0019psq\u0000"
+"~\u0000\u0016q\u0000~\u0000\u0019psr\u00002com.sun.msv.grammar.Expression$AnyStringExpress"
+"ion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004q\u0000~\u00007q\u0000~\u0000psr\u0000 com.sun.msv.grammar.AnyNam"
+"eClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00002q\u0000~\u00006sq\u0000~\u00001t\u00002com.sun.tt.filters.xlif"
+"fsubsegment.xliff.BinSourcet\u0000+http://java.sun.com/jaxb/xjc/d"
+"ummy-elementssq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0000q\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u0014ppsq\u0000~\u0000kq\u0000~\u0000\u0019psq\u0000~\u0000\u0016"
+"q\u0000~\u0000\u0019pq\u0000~\u0000pq\u0000~\u0000rq\u0000~\u00006sq\u0000~\u00001t\u00002com.sun.tt.filters.xliffsubseg"
+"ment.xliff.BinTargetq\u0000~\u0000uq\u0000~\u00006sq\u0000~\u0000\u0014ppsq\u0000~\u0000kq\u0000~\u0000\u0019psq\u0000~\u0000\u0014q\u0000~\u0000"
+"\u0019psq\u0000~\u0000\u0014q\u0000~\u0000\u0019psq\u0000~\u0000\u0014q\u0000~\u0000\u0019psq\u0000~\u0000\u0000q\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u0014ppsq\u0000~\u0000kq\u0000~\u0000\u0019ps"
+"q\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000~\u0000pq\u0000~\u0000rq\u0000~\u00006sq\u0000~\u00001t\u0000-com.sun.tt.filters.xliffs"
+"ubsegment.xliff.Noteq\u0000~\u0000usq\u0000~\u0000\u0000q\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u0014ppsq\u0000~\u0000kq\u0000~\u0000\u0019psq"
+"\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000~\u0000pq\u0000~\u0000rq\u0000~\u00006sq\u0000~\u00001t\u00005com.sun.tt.filters.xliffsu"
+"bsegment.xliff.ContextGroupq\u0000~\u0000usq\u0000~\u0000\u0000q\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u0014ppsq\u0000~\u0000kq"
+"\u0000~\u0000\u0019psq\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000~\u0000pq\u0000~\u0000rq\u0000~\u00006sq\u0000~\u00001t\u00002com.sun.tt.filters."
+"xliffsubsegment.xliff.PropGroupq\u0000~\u0000usq\u0000~\u0000\u0000q\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u0014ppsq\u0000"
+"~\u0000kq\u0000~\u0000\u0019psq\u0000~\u0000\u0016q\u0000~\u0000\u0019pq\u0000~\u0000pq\u0000~\u0000rq\u0000~\u00006sq\u0000~\u00001t\u00002com.sun.tt.filt"
+"ers.xliffsubsegment.xliff.TransUnitq\u0000~\u0000uq\u0000~\u00006sq\u0000~\u00001t\u0000\bbin-un"
+"itq\u0000~\u00000sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\be"
+"xpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xps"
+"r\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I"
+"\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expr"
+"essionPool;xp\u0000\u0000\u0000$\u0001pq\u0000~\u0000\u0011q\u0000~\u0000\u0012q\u0000~\u0000\u000fq\u0000~\u0000bq\u0000~\u0000\u007fq\u0000~\u0000Vq\u0000~\u0000}q\u0000~\u0000vq"
+"\u0000~\u0000\u0013q\u0000~\u0000\nq\u0000~\u0000Rq\u0000~\u0000Nq\u0000~\u0000\tq\u0000~\u0000\u000bq\u0000~\u0000<q\u0000~\u0000jq\u0000~\u0000xq\u0000~\u0000\u0083q\u0000~\u0000\u0089q\u0000~\u0000\u0015q"
+"\u0000~\u0000\u008fq\u0000~\u0000\u0080q\u0000~\u0000\u0095q\u0000~\u0000\u0081q\u0000~\u0000\u0010q\u0000~\u0000\fq\u0000~\u0000mq\u0000~\u0000yq\u0000~\u0000\u0084q\u0000~\u00008q\u0000~\u0000\u008aq\u0000~\u0000\u0090q"
+"\u0000~\u0000\u0096q\u0000~\u0000~q\u0000~\u0000\u000eq\u0000~\u0000\rx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context) {
            super(context, "---------------------------------");
        }

        protected Unmarshaller(org.jvnet.olt.filters.xliffsubsegment.xliff.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BinUnitImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  10 :
                        attIdx = context.getAttribute("", "ts");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 13;
                            continue outer;
                        }
                        state = 13;
                        continue outer;
                    case  31 :
                        if (("note" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("context-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ContextGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ContextGroupImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("prop-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("trans-unit" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.TransUnitImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.TransUnitImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "resname");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 7;
                            continue outer;
                        }
                        state = 7;
                        continue outer;
                    case  0 :
                        if (("bin-unit" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        break;
                    case  25 :
                        attIdx = context.getAttribute("", "mime-type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 28;
                            continue outer;
                        }
                        break;
                    case  30 :
                        if (("note" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.NoteImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("context-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ContextGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.ContextGroupImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("prop-group" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.PropGroupImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("trans-unit" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.TransUnitImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.TransUnitImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 31;
                        continue outer;
                    case  16 :
                        attIdx = context.getAttribute("", "translate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        state = 19;
                        continue outer;
                    case  13 :
                        attIdx = context.getAttribute("", "reformat");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        state = 16;
                        continue outer;
                    case  29 :
                        if (("bin-target" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BinTargetImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BinTargetImpl.class), 30, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  22 :
                        attIdx = context.getAttribute("", "restype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 25;
                            continue outer;
                        }
                        state = 25;
                        continue outer;
                    case  28 :
                        if (("bin-source" == ___local)&&("" == ___uri)) {
                            _getContent().add(((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BinSourceImpl) spawnChildFromEnterElement((org.jvnet.olt.filters.xliffsubsegment.xliff.impl.BinSourceImpl.class), 29, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  1 :
                        attIdx = context.getAttribute("", "phase-name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 4;
                            continue outer;
                        }
                        state = 4;
                        continue outer;
                    case  19 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 22;
                            continue outer;
                        }
                        break;
                    case  32 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  7 :
                        attIdx = context.getAttribute("", "approved");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        state = 10;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Ts = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Resname = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _MimeType = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Restype = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _PhaseName = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Id = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  10 :
                        attIdx = context.getAttribute("", "ts");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 13;
                            continue outer;
                        }
                        state = 13;
                        continue outer;
                    case  31 :
                        if (("bin-unit" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 32;
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "resname");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 7;
                            continue outer;
                        }
                        state = 7;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "mime-type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 28;
                            continue outer;
                        }
                        break;
                    case  30 :
                        state = 31;
                        continue outer;
                    case  16 :
                        attIdx = context.getAttribute("", "translate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        state = 19;
                        continue outer;
                    case  13 :
                        attIdx = context.getAttribute("", "reformat");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        state = 16;
                        continue outer;
                    case  29 :
                        state = 30;
                        continue outer;
                    case  22 :
                        attIdx = context.getAttribute("", "restype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 25;
                            continue outer;
                        }
                        state = 25;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "phase-name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 4;
                            continue outer;
                        }
                        state = 4;
                        continue outer;
                    case  19 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 22;
                            continue outer;
                        }
                        break;
                    case  32 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  7 :
                        attIdx = context.getAttribute("", "approved");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        state = 10;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  10 :
                        if (("ts" == ___local)&&("" == ___uri)) {
                            state = 11;
                            return ;
                        }
                        state = 13;
                        continue outer;
                    case  4 :
                        if (("resname" == ___local)&&("" == ___uri)) {
                            state = 5;
                            return ;
                        }
                        state = 7;
                        continue outer;
                    case  25 :
                        if (("mime-type" == ___local)&&("" == ___uri)) {
                            state = 26;
                            return ;
                        }
                        break;
                    case  30 :
                        state = 31;
                        continue outer;
                    case  16 :
                        if (("translate" == ___local)&&("" == ___uri)) {
                            state = 17;
                            return ;
                        }
                        state = 19;
                        continue outer;
                    case  13 :
                        if (("reformat" == ___local)&&("" == ___uri)) {
                            state = 14;
                            return ;
                        }
                        state = 16;
                        continue outer;
                    case  29 :
                        state = 30;
                        continue outer;
                    case  22 :
                        if (("restype" == ___local)&&("" == ___uri)) {
                            state = 23;
                            return ;
                        }
                        state = 25;
                        continue outer;
                    case  1 :
                        if (("phase-name" == ___local)&&("" == ___uri)) {
                            state = 2;
                            return ;
                        }
                        state = 4;
                        continue outer;
                    case  19 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 20;
                            return ;
                        }
                        break;
                    case  32 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  7 :
                        if (("approved" == ___local)&&("" == ___uri)) {
                            state = 8;
                            return ;
                        }
                        state = 10;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  24 :
                        if (("restype" == ___local)&&("" == ___uri)) {
                            state = 25;
                            return ;
                        }
                        break;
                    case  10 :
                        attIdx = context.getAttribute("", "ts");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 13;
                            continue outer;
                        }
                        state = 13;
                        continue outer;
                    case  18 :
                        if (("translate" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        break;
                    case  27 :
                        if (("mime-type" == ___local)&&("" == ___uri)) {
                            state = 28;
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "resname");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 7;
                            continue outer;
                        }
                        state = 7;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "mime-type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 28;
                            continue outer;
                        }
                        break;
                    case  3 :
                        if (("phase-name" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  12 :
                        if (("ts" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        break;
                    case  9 :
                        if (("approved" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        break;
                    case  30 :
                        state = 31;
                        continue outer;
                    case  15 :
                        if (("reformat" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("resname" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  16 :
                        attIdx = context.getAttribute("", "translate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        state = 19;
                        continue outer;
                    case  13 :
                        attIdx = context.getAttribute("", "reformat");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        state = 16;
                        continue outer;
                    case  21 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        break;
                    case  29 :
                        state = 30;
                        continue outer;
                    case  22 :
                        attIdx = context.getAttribute("", "restype");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 25;
                            continue outer;
                        }
                        state = 25;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "phase-name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 4;
                            continue outer;
                        }
                        state = 4;
                        continue outer;
                    case  19 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 22;
                            continue outer;
                        }
                        break;
                    case  32 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  7 :
                        attIdx = context.getAttribute("", "approved");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        state = 10;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  10 :
                            attIdx = context.getAttribute("", "ts");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 13;
                                continue outer;
                            }
                            state = 13;
                            continue outer;
                        case  8 :
                            if (___dt0 .isValid(value, null)) {
                                eatText7(value);
                                state = 9;
                                return ;
                            }
                            if (___dt1 .isValid(value, null)) {
                                eatText8(value);
                                state = 9;
                                return ;
                            }
                            break;
                        case  17 :
                            if (___dt2 .isValid(value, null)) {
                                eatText9(value);
                                state = 18;
                                return ;
                            }
                            if (___dt3 .isValid(value, null)) {
                                eatText10(value);
                                state = 18;
                                return ;
                            }
                            break;
                        case  4 :
                            attIdx = context.getAttribute("", "resname");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 7;
                                continue outer;
                            }
                            state = 7;
                            continue outer;
                        case  2 :
                            eatText5(value);
                            state = 3;
                            return ;
                        case  14 :
                            if (___dt4 .isValid(value, null)) {
                                eatText11(value);
                                state = 15;
                                return ;
                            }
                            if (___dt5 .isValid(value, null)) {
                                eatText12(value);
                                state = 15;
                                return ;
                            }
                            break;
                        case  25 :
                            attIdx = context.getAttribute("", "mime-type");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 28;
                                continue outer;
                            }
                            break;
                        case  23 :
                            eatText4(value);
                            state = 24;
                            return ;
                        case  5 :
                            eatText2(value);
                            state = 6;
                            return ;
                        case  30 :
                            state = 31;
                            continue outer;
                        case  20 :
                            eatText6(value);
                            state = 21;
                            return ;
                        case  16 :
                            attIdx = context.getAttribute("", "translate");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            state = 19;
                            continue outer;
                        case  13 :
                            attIdx = context.getAttribute("", "reformat");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            state = 16;
                            continue outer;
                        case  26 :
                            eatText3(value);
                            state = 27;
                            return ;
                        case  29 :
                            state = 30;
                            continue outer;
                        case  22 :
                            attIdx = context.getAttribute("", "restype");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText4(v);
                                state = 25;
                                continue outer;
                            }
                            state = 25;
                            continue outer;
                        case  1 :
                            attIdx = context.getAttribute("", "phase-name");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText5(v);
                                state = 4;
                                continue outer;
                            }
                            state = 4;
                            continue outer;
                        case  19 :
                            attIdx = context.getAttribute("", "id");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText6(v);
                                state = 22;
                                continue outer;
                            }
                            break;
                        case  11 :
                            eatText1(value);
                            state = 12;
                            return ;
                        case  32 :
                            revertToParentFromText(value);
                            return ;
                        case  7 :
                            attIdx = context.getAttribute("", "approved");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            state = 10;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Approved = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Approved = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Translate = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Translate = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText11(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Reformat = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText12(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Reformat = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
