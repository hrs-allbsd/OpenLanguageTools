
/*
 * Copyright  2005 Sun Microsystems, Inc.
 * All rights reserved Use is subject to license terms.
 *
 */

/*
 * XliffFilterGUI.java
 *
 * Created on May 17, 2005, 10:35 AM
 */
package org.jvnet.olt.filters.gui;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.File;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetListener;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.dnd.DnDConstants;
import java.io.FileInputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * Simple GUI code to do drag & drop XLIFF Conversion. Tested and works on
 * GNOME, Mac OSX and Win32 (XP professional, I think, but can't remember) Other
 * platforms may not work - the way of doing native app to java drag and drop
 * doesn't seem to be terribly coherent, so this may need work. Also need to look
 * at configuration and user preferences : right now, there are none !
 * @author  timf
 */
public class XliffFilterGUI extends javax.swing.JFrame implements DropTargetListener {
    
    private DropFileExtractor extr =  new DropFileExtractor();
    private boolean firstShow = true;
    private Map attributes = null;
    private String resourcesDir = null;
    
    //height of log when first 'Show Log' button hit first time
    private int PREFFERED_HEIGHT = 200;
    
    /** Creates new form XliffFilterGUI */
    public XliffFilterGUI() {
        initComponents();
        // make a drop target that uses this as it's lister
        DropTarget d = new DropTarget((Component)jLabel1, (DropTargetListener)this);
        d.setActive(true);
        
        // for convenience, we just use the default logger.
        logger = Logger.getLogger("Conversion");
        
        //add textarea log handler
        logger.addHandler(new TextAreaHandler(logTextArea));
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        showLogBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.setVisible(false);
        setShowLogBtnText();
        logTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Open Language Tools XLIFF Filters");
        showLogBtn.setText("Show log >>>");
        showLogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLogBtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(showLogBtn, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(150, 200));
        logTextArea.setEditable(false);
        logTextArea.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jScrollPane1.setViewportView(logTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Drop Files Here");
        jLabel1.setBorder(new javax.swing.border.TitledBorder("Open Language Tools XLIFF Filters"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 15, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    private void showLogBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showLogBtnActionPerformed
        
        //Show / hide log button action
        
        boolean newState = !jScrollPane1.isVisible();
        jScrollPane1.setVisible(! jScrollPane1.isVisible());
        int height = (int)jScrollPane1.getSize().getHeight();
        if(firstShow){
            height = PREFFERED_HEIGHT;
            firstShow = false;
        }
        
        Dimension d = getSize();
        d.setSize(d.getWidth(),d.getHeight() + (newState ? 1 : -1) * height);
        setSize(d);
        setShowLogBtnText();
        updateLableLayout();
        repaint();
        pack();
        
    }//GEN-LAST:event_showLogBtnActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        final String resourcesDir = args[0];
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                XliffFilterGUI gui = new XliffFilterGUI();
                gui.setResourcesDir(resourcesDir);
                gui.setVisible(true);
            }
        });
        
    }
    
    public void dragEnter(DropTargetDragEvent dtde) {
        // System.out.println("Drag Enter event");
    }
    
    public void dragExit(DropTargetEvent dte) {
        // System.out.println("Drag Exit event");
    }
    
    public void dragOver(DropTargetDragEvent dtde) {
        /// System.out.println("Drag over event");
    }
    
    /**
     * This is the event that gets called when a user drops a file on
     * top of the label saying "drop files here" - it's action is to
     * extract the filename the user has dropped on the label, and
     * kick off a XliffFilterRunner to convert the file to xliff which
     * then makes a callback to this class to display a dialog box.
     */
    public void drop(java.awt.dnd.DropTargetDropEvent dtde) {
        if (this.attributes == null){
            this.logger.log(Level.SEVERE,"WARNING : Filter attributes not configured !");
        }
        
        dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
        
        List files = extr.extractFiles(dtde);
        if (files.isEmpty()){
            this.logger.log(Level.SEVERE, "ERROR : No files found from drop target !");
            showCompletionDialog(false);
        } else {
            convertFiles(files);
        }
    }
    
    /**
     * Do the actual task of kicking off a converter for each file in the fileList
     * @param fileList the list of Files to be converted to XLIFF
     */
    private void convertFiles(List fileList){
        
        XliffFilterStarter starter = new XliffFilterStarter(fileList, attributes, this.logger, new UICallback(){
            
            public void start(){
                SwingUtilities.invokeLater(new Runnable(){
                    public void run(){
                        XliffFilterGUI.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    }
                });
            }
            
            public void startFile(File f) {
                logger.info("Processing file:"+f.getAbsolutePath());
            }
            
            public void doneFile() {
            }
            
            public void doneAll(final int failed) {
                SwingUtilities.invokeLater(new Runnable(){
                    public void run(){
                        XliffFilterGUI.this.setCursor(Cursor.getDefaultCursor());
                        
                        showCompletionDialog(failed == 0 );
                    }
                });
            }
        });
        
        starter.runFilters();
        
    }
    
    
    /**
     * Show a dialog that says we've completed processing of a given file with
     * a (hopefully) meaningful error message.
     * @param file the file we've just converted (or tried to)
     * @param success true if the conversion was successful
     */
    protected void showCompletionDialog(boolean success){
        if (success){
            JOptionPane.showMessageDialog((Component)this,
                    "All files were converted successfuly",
                    "Open Language Tools XLIFF Filter",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog((Component)this,
                    "Conversion of some of the files failed - see log file for more information.\n",
                    "Open Language Tools XLIFF Filter",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    
    public void dropActionChanged(DropTargetDragEvent dtde) {
        // System.out.println("Drop action changed");
    }
    
    private void setShowLogBtnText(){
        if(showLogBtn != null && jScrollPane1 != null)
            showLogBtn.setText(jScrollPane1.isVisible() ? " Hide log <<<" : "Show log >>>");
    }
    
    private void updateLableLayout(){
        boolean visible = jScrollPane1.isVisible();
        
        GridBagLayout layout = (GridBagLayout)getContentPane().getLayout();
        GridBagConstraints c = layout.getConstraints(jLabel1);
        c.weighty = visible ? 0.0 : 1.0;
        
        layout.setConstraints(jLabel1,c);
    }
    
    /**
     * Here's where we need to set/configure user preferences : we return a map
     * of key/value pairs that we can use to configure the filters.
     * @return a Map containing key/value pairs
     */
    private Map getUserPreferences(){
        
        Map attribs = new HashMap();
        Preferences prefs = Preferences.userNodeForPackage(XliffFilterGUI.class);
        attribs.put("source.language",
                prefs.get("source.language", "en-US"));
        attribs.put("file.encoding",
                prefs.get("file.encoding",  System.getProperty("file.encoding")));
        attribs.put("xml.config.dtd",
                prefs.get("xml.config.dtd",
                resourcesDir+File.separator+"xml-config.dtd"));
        attribs.put("xml.config.dir",
                prefs.get("xml.config.dir",
                resourcesDir+File.separator+".xml-config-store"));
        
        // now save our preferences back to the underlying store if needed
        prefs.put("source.language", (String)attribs.get("source.language"));
        prefs.put("file.encoding", (String)attribs.get("file.encoding"));
        prefs.put("xml.config.dtd", (String)attribs.get("xml.config.dtd"));
        prefs.put("xml.config.dir",  (String)attribs.get("xml.config.dir"));
        
        boolean configuredXmlStore = prefs.getBoolean("configured.xml.config", false);
        
        if (!configuredXmlStore){
            try {
                XliffFilterFacade.updateXmlConfigRepository(resourcesDir+File.separator+"xml-config",
                        resourcesDir+File.separator+".xml-config-store",
                        resourcesDir+File.separator+"xml-config.dtd");
                
                prefs.putBoolean("configured.xml.config", true);
            } catch (XliffFilterFacadeException e){
                this.logger.log(Level.SEVERE,"Problem configuring XML filter!",e);
            }
        }
        return attribs;
    }
    
    public String getResourcesDir(){
        if (this.resourcesDir == null){
            this.logger.log(Level.SEVERE,"WARNING ! No resources file defined !");
        }
        return this.resourcesDir;
    }
    
    public void setResourcesDir(String resourcesDir){
        this.resourcesDir = resourcesDir;
        this.attributes = getUserPreferences();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton showLogBtn;
    // End of variables declaration//GEN-END:variables
    /** A logger we can use to capture logging output with
     */
    private Logger logger = null;
}
