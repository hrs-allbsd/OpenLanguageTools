
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/*
 * File:           XmlLookupHandlerImpl.java
 * Date:           06 February 2003  11:26
 *
 * @author  bpk1
 * @version generated by NetBeans XML module
 */
package org.jvnet.olt.filters.xml.xmlconfig;

import org.xml.sax.*;
import java.lang.Boolean;

public class XmlLookupHandlerImpl implements XmlLookupHandler {
          
    private XmlIdentifier xmlIdentifier;
    
    private boolean debug = false;
    
    public XmlLookupHandlerImpl(XmlIdentifier xmlIdentifier) {
        this.xmlIdentifier = xmlIdentifier;
    }
           
    public void characters(char[] values, int param, int param2) throws org.xml.sax.SAXException {
    }
    
    public void endDocument() throws org.xml.sax.SAXException {
        
        if(debug) {
            System.out.println("endDocument");
        }
        
        try {        
        } catch(Exception ex) {
            System.out.println("exception");
            System.out.println(ex.getMessage());
        }
                               
    }
    
    public void endElement(String str, String str1, String str2) throws org.xml.sax.SAXException {
        if(debug) {
            System.out.println("endElement");
        }
    }
    
    public void endPrefixMapping(String str) throws org.xml.sax.SAXException {
        if(debug) {
            System.out.println("endPrefixMapping");
        }
    }
    
    public void ignorableWhitespace(char[] values, int param, int param2) throws org.xml.sax.SAXException {
        if(debug) {
            System.out.println("ignorableWhitespace");
        }
    }
    
    public void processingInstruction(String str, String str1) throws org.xml.sax.SAXException {
        if(debug) {
            System.out.println("processingInstruction");
        }
    }
    
    public void setDocumentLocator(org.xml.sax.Locator locator) {
        if(debug) {
            System.out.println("setDocumentLocator" +locator); 
        }
    }
    
    public void skippedEntity(String str) throws org.xml.sax.SAXException {
        if(debug) {
            System.out.println("skippedEntity");
        }
    }
    
    public void startDocument() throws org.xml.sax.SAXException {    
        if(debug) {
            System.out.println("startDocument");
        }
    }
    
    public void startElement(String str, String str1, String str2, org.xml.sax.Attributes attributes) throws org.xml.sax.SAXException {
        if(debug) {
            System.out.println("startElement");
            System.out.println("str = " + str);
            System.out.println("str1 = " + str1);
            System.out.println("str2 = " + str2);
        }
        
        int count = attributes.getLength();
        
        for(int i = 0; i < count; i++) {
            
            if(attributes.getQName(i).equals("schemaLocation")) {
                xmlIdentifier.setSchemaLocation(attributes.getValue(i));
            }
            
            if(attributes.getQName(i).equals("noNamespaceSchemaLocation")) {
                xmlIdentifier.setNoNamespaceSchemaLocation(attributes.getValue(i));
            }
            
            if(attributes.getQName(i).startsWith("xmlns")) {
                xmlIdentifier.addNamespace(attributes.getValue(i));
            }
        
            if(debug) {
                System.out.println("Attribute:");
                System.out.println("getLocalName = " + attributes.getLocalName(i));
                System.out.println("getQName = " + attributes.getQName(i));
                System.out.println("getType = " + attributes.getType(i));
                System.out.println("getURI = " + attributes.getURI(i));
                System.out.println("getValue = " + attributes.getValue(i));
            }
        }
    }
    
    public void startPrefixMapping(String str, String str1) throws org.xml.sax.SAXException {
        if(debug) {
            System.out.println("startPrefixMapping");
        }
    }   
       
    public XmlIdentifier getXmlIdentifier() {
        return xmlIdentifier;
    } 
    
    public void setXmlIdentifier(XmlIdentifier xmlIdentifier) {
        this.xmlIdentifier = xmlIdentifier;
    }
                                
    
}

