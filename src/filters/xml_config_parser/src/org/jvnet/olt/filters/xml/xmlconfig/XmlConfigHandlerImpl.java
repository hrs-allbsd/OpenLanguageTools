
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/*
 * File:           XmlConfigHandlerImpl.java
 * Date:           06 February 2003  11:26
 *
 * @author  bpk1
 * @version generated by NetBeans XML module
 */
package org.jvnet.olt.filters.xml.xmlconfig;

import org.xml.sax.*;
import java.lang.Boolean;

public class XmlConfigHandlerImpl implements XmlConfigHandler {
    
    public static final boolean DEBUG = false;
    
    public XmlConfig config;
    
    public XmlConfigHandlerImpl(XmlConfig theConfig) {
        this.config = theConfig;
    }
    
    public XmlConfigHandlerImpl() {
        this.config = new XmlConfig();
    }
    
    public void handle_config_element(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) {
            System.err.println("handle_config_element: " + data);
            
            System.err.println("attribute root-element: " + 
                meta.getValue("root-element"));
            System.err.println("attribute default: " + 
                meta.getValue("default"));
            System.err.println("attribute parent: " + 
                meta.getValue("parent"));
            System.err.println("attribute translatable: " + 
                meta.getValue("translatable"));
            System.err.println("attribute segmentable: " + 
                meta.getValue("nonsegmentable"));
            System.err.println("attribute wordcountable: " + 
                meta.getValue("nonsegmentablenowordcount"));
            System.err.println("attribute empty : " + 
                meta.getValue("empty"));
            System.err.println("attribute preserve-whitespace: " + 
                meta.getValue("preserve-whitespace"));
            System.err.println("attribute hardness: " + 
                meta.getValue("hardness"));
        }
        
        XmlElement xmlElement = new XmlElement(data);
        xmlElement.setRootElement(
            this.getTruth(meta.getValue("root-element")));
        xmlElement.setDefaultElement(
            this.getTruth(meta.getValue("default")));
        xmlElement.setTranslatable(
            this.getTruth(meta.getValue("translatable")));
        xmlElement.setNonSegmentable(
            this.getTruth(meta.getValue("nonsegmentable")));
        xmlElement.setNonSegmentableNoWordcount(
            this.getTruth(meta.getValue("nonsegmentablenowordcount")));
        
        xmlElement.setEmpty(this.getTruth(meta.getValue("empty")));
        xmlElement.setPreserveWhitespace(
            this.getTruth(meta.getValue("preserve-whitespace")));
        xmlElement.setParentElement(meta.getValue("parent"));
        xmlElement.setHardness(meta.getValue("hardness"));
        
        config.addXmlElementName(xmlElement);
        
    }
    
    public void handle_noNamespaceSchemaLocation(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_noNamespaceSchemaLocation: " + data);
        
        config.setNoNamespaceSchemaLocation(data);
    }
    
    public void start_schema(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_schema: " + meta);
    }
    
    public void end_schema() throws SAXException {
        if (DEBUG) System.err.println("end_schema()");
    }
    
    public void handle_public(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_public: " + data);
        
        config.setPublicID(data);
    }
    
    public void start_config(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_config: " + meta);
    }
    
    public void end_config() throws SAXException {
        if (DEBUG) System.err.println("end_config()");
    }
    
    public void handle_file_type_description(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_file_type_description: " + data);
        
        config.setFileTypeDescription(data);
    }
    
    public void handle_generated_by(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_generated_by: " + data);
        
        config.setGeneratedBy(data);
    }
    
    public void start_dtd(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_dtd: " + meta);
    }
    
    public void end_dtd() throws SAXException {
        if (DEBUG) System.err.println("end_dtd()");
    }
    
    public void start_head(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_head: " + meta);
    }
    
    public void end_head() throws SAXException {
        if (DEBUG) System.err.println("end_head()");
    }
    
    public void handle_config_attribute(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) {
            System.err.println("handle_config_attribute: " + data);
            System.err.println("handle_config_attribute - attribs: " + meta);  
    
            System.err.println("attribute default: " + 
                meta.getValue("default"));
            System.err.println("attribute parent-element: " + 
                meta.getValue("parent-element"));
            System.err.println("attribute translatable: " + 
                meta.getValue("translatable"));
        }
        
        XmlAttribute xmlAttribute = new XmlAttribute(data);
                
        xmlAttribute.setDefaultAttribute(
            this.getTruth(meta.getValue("default")));
        xmlAttribute.setTranslatable(
            this.getTruth(meta.getValue("translatable")));
        xmlAttribute.setParentElement(meta.getValue("parent-element"));
                
        config.addXmlAttribute(xmlAttribute);
    }
    
    public void handle_schemaLocation(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_schemaLocation: " + data);
        
        config.setSchemaLocation(data);
    }
    
    public void start_identifier(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_identifier: " + meta);
    }
    
    public void end_identifier() throws SAXException {
        if (DEBUG) System.err.println("end_identifier()");
    }
    
    public void handle_namespace(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_namespace: " + data);
        
        config.setNamespace(data);
    }
    
    public void handle_file_type(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_file_type: " + data);
        
        config.setFileType(data);
    }
    
    public void handle_system(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_system: " + data);
        
        config.setSystemID(data);
    }
    
    public void handle_last_modified_date(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_last_modified_date: " + data);
        
        config.setLastModifiedDate(data);
    }
    
    public void handle_generated_date(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_generated_date: " + data);
        
        config.setGeneratedDate(data);
    }
    
    public void start_body(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_body: " + meta);
    }
    
    public void end_body() throws SAXException {
        if (DEBUG) System.err.println("end_body()");
    }
    
    public void handle_author(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_author: " + data);
        
        config.setAuthor(data);
    }
    
    public void characters(char[] values, int param, int param2) throws org.xml.sax.SAXException {
    }
    
    public void endDocument() throws org.xml.sax.SAXException {
         
        /* try {        
        System.out.println("Config: " + config.toString());
        } catch(Exception ex) {
            System.out.println("exception");
            System.out.println(ex.getMessage());
        }  */
                               
    }
    
    public void endElement(String str, String str1, String str2) throws org.xml.sax.SAXException {
    }
    
    public void endPrefixMapping(String str) throws org.xml.sax.SAXException {
    }
    
    public void ignorableWhitespace(char[] values, int param, int param2) throws org.xml.sax.SAXException {
    }
    
    public void processingInstruction(String str, String str1) throws org.xml.sax.SAXException {
    }
    
    public void setDocumentLocator(org.xml.sax.Locator locator) {
    }
    
    public void skippedEntity(String str) throws org.xml.sax.SAXException {
    }
    
    public void startDocument() throws org.xml.sax.SAXException {
                       
    }
    
    public void startElement(String str, String str1, String str2, org.xml.sax.Attributes attributes) throws org.xml.sax.SAXException {
    }
    
    public void startPrefixMapping(String str, String str1) throws org.xml.sax.SAXException {
    }
    
    public boolean getTruth(String truthValue) {
        
        if(truthValue.toLowerCase().equals("no")) {
            return false;
        }
        return true;
            
    }
    
    public XmlConfig getXmlConfig() {
        return config;        
    }
    
}

