
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

options{
  NODE_PACKAGE = "org.jvnet.olt.parsers.XmlDocFragmentParser";
  LOOKAHEAD=1;
  VISITOR = true;
  FORCE_LA_CHECK = true;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(XmlDocFragmentParser)

package org.jvnet.olt.parsers.XmlDocFragmentParser;
import org.jvnet.olt.parsers.tagged.*;

public class XmlDocFragmentParser
{
  protected boolean boolParsed = false;

  /**
   *  @exception  ParseException
   */
  public void parse()
    throws ParseException
  {
    //  Call top level rule.
    file();
    boolParsed = true;
  }

  /**
   *  walkParseTree:  This method provides an interface to allow node Visitors
   *  to be passed to the parse tree generated by this parser. 
   *  @param  visitor The visitor to act on all the nodes in the parse tree.
   *  @param  data    An object to be used as an aid to the tree walk.
   *  @exception Exception
   */
  public void walkParseTree(XmlDocFragmentParserVisitor visitor, Object data)
    throws Exception 
  {
    if(boolParsed && (visitor != null))
    {
      //  Get root node of the parse tree
      SimpleNode node =(SimpleNode) jjtree.rootNode();
      node.jjtAccept(visitor, data);
    }
    else
    {
      //  Throw an exception
      throw new Exception("Input stream not parsed");
    }
  }

   /**
   *  walkParseTree:  This method provides an interface to allow node Visitors of a generic type
   *  to be passed to the parse tree generated by this parser. 
   *  @param  visitor The visitor to act on all the nodes in the parse tree.
   *  @param  data    An object to be used as an aid to the tree walk.
   *  @exception Exception
   */
  public void walkParseTree(TaggedMarkupVisitor visitor, Object data)
    throws Exception 
  {
    if(boolParsed && (visitor != null))
    {
      //  Get root node of the parse tree
      TaggedMarkupNode node =(TaggedMarkupNode) jjtree.rootNode();
      node.jjtAccept(visitor, data);
    }
    else
    {
      //  Throw an exception
      throw new Exception("Input stream not parsed");
    }
  }

  protected void finalize() throws Throwable
  {
    super.finalize();
  }
}

PARSER_END(XmlDocFragmentParser)


//  Tokens

/*  Comments */
<IN_INTERNAL_SUBSET>
MORE :
{
  "<!--" : IN_SUBSET_COMMENT
}

<IN_SUBSET_COMMENT>
TOKEN :
{
  <SUBSET_COMMENT: "-->" > : IN_INTERNAL_SUBSET
}

MORE :
{
  "<!--" : IN_COMMENT
}

<IN_COMMENT>
TOKEN :
{
  <COMMENT: "-->" > : DEFAULT
}

/*  Processing Instructions */
MORE :
{
  "<?" : IN_PI
}

<IN_PI>
TOKEN :
{
  <PI: ">" > : DEFAULT
}


/*  Doctype declaration */
/* Strictly speaking, <!doctype is incorrect, but netscrape 4.x composer writes
   doctypes in lower case, so we have to deal with them */
TOKEN :
{
  <DOCTYPE: ( "<!DOCTYPE" | "<!doctype") > : DOCTYPEDECL
}

<DOCTYPEDECL>
TOKEN :
{
  <INTERNAL_SUBSET_START : "[" > : IN_INTERNAL_SUBSET
}

<IN_INTERNAL_SUBSET>
TOKEN :
{
  <INTERNAL_SUBSET_WS : ( " " | "\t" | "\n" | "\f" | "\b" | "\r")+ > 
}

<IN_INTERNAL_SUBSET>
TOKEN :
{
  <INTERNAL_SUBSET_END: "]" > : DOCTYPEDECL
}

<IN_INTERNAL_SUBSET>
MORE :
{
    "<!ENTITY" : IN_ENTITY_DECL
}

<IN_INTERNAL_SUBSET>
TOKEN :
{
	<WEIRD_ENT : ("%") ( ~["<" , " " , "\t", "]", "\n", "\r", ";" ] )+ (";")? >
}

<IN_ENTITY_DECL>
TOKEN :
{
  <#ENT_STRING_LIT: "'" ( ~["'"] )* "'" | "\"" ( ~["\""] )* "\""  >
|  <ENTITY_DECL : ">" > : IN_INTERNAL_SUBSET
}

<IN_ENTITY_DECL>
MORE :
{  
  <(  <ENT_STRING_LIT> | ~[">"] )    >
}
  

<DOCTYPEDECL>
TOKEN :
{
  <DOCTYPE_CLOSE:         ">"             > : DEFAULT 
| <DOCTYPE_TEXT:          ( ~["[", ">" ] )+     >  
}



/*  CDATA Sections */
MORE :
{
  "<![CDATA[" : IN_CDATA
}

<IN_CDATA>
TOKEN :
{
  <CDATA: "]]>" > : DEFAULT
}



//  The continuation clauses for the various MORE tokens
<IN_COMMENT,
IN_SUBSET_COMMENT,
IN_PI,
//IN_ENTITY_DECL,
IN_CDATA>
MORE :
{
  < ~[] >
}

TOKEN :
{
	<ENTITY: ("&" | "%") ( ~["<" , " " , "\t" , "\n", "\r", ";" ] )+ (";")? >
}

/*  Tags and bracket tokens */
TOKEN :
{
        <SMARKSECT:  "<!["  >
|       <EMARKSECT:  "]]>"  >
|	<STAGO:	     "<"				>	: TAG
|	<ETAGO:	     "</"				>	: TAG
|       <OSQRB:      "["  >
|       <CSQRB:      "]"  >
|       <GT:         ">"  >
|	<PCDATA:     ( ~["<", "\u0000", "&", "%", ">" , "]" , "[", "\r","\n","\b","\f"," ","\t"] )+   >
|       <WHITESPACE: ( ["\r","\n","\b","\f"," ","\t"] )+	>
|	<AMP:	     "&"  >
|	<PCT:	     "%"  > 
}

/* <TAG>
TOKEN :
{
        <#ALPHA:	["a"-"z","A"-"Z","_","-","."]	>
|	<#NUM:		["0"-"9"]			>
|	<#ALPHANUM:	<ALPHA> | <NUM>			>        
|       <TAGNAME:       <ALPHA> ( <ALPHANUM> )*         >   : ATTLIST 
} */

/* <TAG>
TOKEN :
{
    <#LETTER:   ["a"-"z","A"-"Z"]   >
|   <#NUM:		["0"-"9"]			>
|   <#NAMECHAR:	<LETTER> | <NUM> | "." | "-" | "_" | ":" >
|   <TAGNAME:   ( <LETTER> | "_" | ":" ) ( <NAMECHAR> )*  >   : ATTLIST 
} */

<TAG>
TOKEN :
{
    <#LETTER:   ["a"-"z","A"-"Z"]   >
|   <#NUM:		["0"-"9"]			>
|   <#NCNAMECHAR:	<LETTER> | <NUM> | "." | "-" | "_"  >
|   <NCNAME:   ( <LETTER> | "_" ) ( <NCNAMECHAR> )*  >   : ATTLIST 
}

<TAG>
TOKEN :
{
    <PREFIX:   ( <NCNAME> ) ( ":" ) > 
}

<TAG, ATTLIST>
TOKEN :
{
    <EMPTYTAGC:		"/>"				>  : DEFAULT
}

<TAG, ATTLIST>
TOKEN :
{
    <TAGC:		">"				>	: DEFAULT   
}

<TAG, ATTLIST>
TOKEN :
{
    <WS:		(["\r","\n","\b","\f"," ","\t"])+	>
}

<ATTLIST> TOKEN :
{  <#STRING_LIT: "'" ( ~["'"] )* "'" | "\"" ( ~["\""] )* "\""  >
|  <ATTRIBS:       (  <STRING_LIT> | ~[ ">", "/", "\"", "'" ] )+    >
}




//  Productions
void file() :
{}
{
  ( comment() | pcdata() | processing_inst() )*
  ( doctype() )?
  ( xml_data() )*
  (eof())
}

void doctype() :
{}
{
  doctype_beginning()
  ( internal_sub_set() )?
  doctype_ending()
}

void doctype_beginning() :
{
  Token t;
  String s = "";
}
{
  (
    t=<DOCTYPE> {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
  }
    t=<DOCTYPE_TEXT> {
    s += t.image;
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
  ) 
  {  jjtThis.setNodeData(s); }
}

void doctype_ending() :
{
  Token t;
  String s = "";
}
{
  (
    ( t=<DOCTYPE_TEXT> { 
      s = t.image;
      jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    } )?
    t=<DOCTYPE_CLOSE> { 
      s += t.image;    
      jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
      jjtThis.setEndPos(t.endLine, t.endColumn, false);
    }
  ) 
  {  jjtThis.setNodeData(s); }
}


void internal_sub_set() :
{}
{
  internal_sub_set_beginning()
  (internal_sub_set_ws_comment())? 
  (
    (entity_decl() | int_entity()) (internal_sub_set_ws_comment())?
    //(entity_decl()) (internal_sub_set_ws_comment())?
  )*
  internal_sub_set_ending()
}

void internal_sub_set_beginning() :
{
  Token t;
}
{
  t=<INTERNAL_SUBSET_START> {
    jjtThis.setNodeData(t.image); 
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}

void internal_sub_set_ending() :
{
  Token t;
}
{
  t=<INTERNAL_SUBSET_END> {
    jjtThis.setNodeData(t.image); 
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}

void internal_sub_set_ws_comment() :
{
  Token t;
  String s = "";
}
{
     ( 
       t=<INTERNAL_SUBSET_WS>  { 
         s += t.image;   
	 jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
	 jjtThis.setEndPos(t.endLine, t.endColumn, true);
       } 
	 | 
       t=<SUBSET_COMMENT>      {  
         s += t.image;   
	 jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
	 jjtThis.setEndPos(t.endLine, t.endColumn, true);
       }
     )+
     { jjtThis.setNodeData(s);}
}

void entity_decl() :
{
  Token t;
}
{
  t=<ENTITY_DECL> {
    jjtThis.setNodeData(t.image); 
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}

void xml_data() :
{}
{
    (  comment() 
       | tag() 
       | pcdata() 
       | entity()
       | marked_sect() 
       | cdata() 
       | processing_inst() 
    )
}

void comment() :
{
  Token t;
}
{
  t=<COMMENT> {
    jjtThis.setNodeData(t.image); 
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}


void cdata() :
{
  Token t;
}
{
  t=<CDATA> {
    jjtThis.setNodeData(t.image); 
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}

void processing_inst() :
{
  Token t;
}
{
  t=<PI> {
    jjtThis.setNodeData(t.image); 
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}

void entity() :
{
  Token t;
}
{
  t=<ENTITY> {
    jjtThis.setNodeData(t.image); 
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}

void int_entity() :
{
  Token t;
}
{
  t=<WEIRD_ENT> {
    jjtThis.setNodeData(t.image);
	jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
	jjtThis.setEndPos(t.endLine, t.endColumn, false);
  }
}

void pcdata() :
{
  Token t;
  String s = "";
}
{
  ( t=<PCDATA>   {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, true);
  } 
    | t=<OSQRB>  {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, true);
  }
    | t=<CSQRB>  {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, true);
  } 
    | t=<GT>     {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, true);
  } 
    | t=<AMP>     {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, true);
  } 
    | t=<PCT>     {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, true);
  } 
    | t=<WHITESPACE>     {
    s = t.image;
    jjtThis.setBeginPos(t.beginLine, t.beginColumn, false);
    jjtThis.setEndPos(t.endLine, t.endColumn, true);
  } 
  )
  { jjtThis.setNodeData(s); } 
}

void marked_sect() :
{}
{
  marked_section_tag()
    ( xml_data() )*
  end_marked_sect()
}

String start_marked_sect() :
{
  Token t;
}
{
  t=<SMARKSECT> { return t.image; }
}

void marked_section_tag() :
{
  String s="";
  String st="";
  String sflag;
  Token t;
}
{
  ( st=start_marked_sect()      { s += st; }
  (
    ( t=<WHITESPACE>                { s += t.image; } )?
    sflag=marked_section_flag() { s += sflag; }
    ( t=<WHITESPACE>                { s += t.image; } )?
    st=open_sqr_brkt()          { s += st; }
  )
  ) 
  { jjtThis.setNodeData(s); jjtThis.setMarkedSectFlag(sflag); }
}

String marked_section_flag() :
{
  Token t;
}
{
  ( t=<ENTITY>
  | t=<PCDATA> ) { return t.image; }
}

String open_sqr_brkt() :
{
  Token t;
}
{
  t=<OSQRB> { return t.image; }
}

void end_marked_sect() :
{
  Token t;
}
{
  t=<EMARKSECT> { jjtThis.setNodeData(t.image); }
}

void tag() :
{}
{
  open_tag() | close_tag()
}

/* String qname() :
{
  Token t;
  String s = ""; 
}
{
  (
    t=<NCNAME> { s += t.image; }  
    | ( t=<PREFIX> { jjtThis.setPrefix(t.image); }
      t=<NCNAME>) { s += t.image; }     
  ) { return s; }
}
 */

void open_tag() :
{
  Token t;
  String s = "";  
  String otag = "";
}
{
  (
    t=<STAGO> { s += t.image; }
    /* otag=qname() { s += otag; jjtThis.setTagName(otag); } */
    /* t=<TAGNAME>  { s += t.image; jjtThis.setTagName(t.image); } */
    (t=<NCNAME> { s += t.image; jjtThis.setTagName(t.image);}  
    | ( t=<PREFIX> { s += t.image; jjtThis.setPrefix(t.image); }
      t=<NCNAME>) { s += t.image; jjtThis.setTagName(t.image);})
    (t=<WS> {s+=t.image;})?

    ( t=<ATTRIBS>  { s += t.image; jjtThis.setHasAttribute(true); } 
     (t=<WS> {s +=t.image; })?
    )*

    (t=<TAGC> { s += t.image; jjtThis.setIsEmptyTag(false); }  
    |t=<EMPTYTAGC> { s += t.image; jjtThis.setIsEmptyTag(true); } )  
  )
  { jjtThis.setNodeData(s); }    
}

void close_tag() :
{
  Token t;
  String s = "";  
  String etag = "";
}
{
  (
    t=<ETAGO> { s += t.image; } 
    /* etag=qname() { s += etag; jjtThis.setTagName(etag); } */
    (t=<NCNAME> { s += t.image; jjtThis.setTagName(t.image);}  
    | ( t=<PREFIX> { s += t.image; jjtThis.setPrefix(t.image); }
      t=<NCNAME>) { s += t.image; jjtThis.setTagName(t.image);})
    (t=<WS> {s+=t.image;})?
    t=<TAGC> { s += t.image; }    
  )
  {  jjtThis.setNodeData(s); }  
}

void eof():
{}{
   <EOF> 
}

