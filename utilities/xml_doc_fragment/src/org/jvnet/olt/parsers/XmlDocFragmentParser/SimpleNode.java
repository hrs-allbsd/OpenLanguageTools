
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package org.jvnet.olt.parsers.XmlDocFragmentParser;
import org.jvnet.olt.parsers.tagged.TaggedMarkupNode;
import org.jvnet.olt.parsers.tagged.TaggedMarkupVisitor;
import java.util.Map;
import java.util.HashMap;

public class SimpleNode implements Node, TaggedMarkupNode {
    
  protected static final TreeConst consts = new TreeConst();

  protected Node parent;
  protected Node[] children;
  protected int id;

  protected String m_nodeData = "";   //  A string to hold data about the node,
                                      //  normally token values.

  protected String m_tagName = "";
  protected String m_markedSectFlag = "";
  protected boolean hasAttribute = false;
  protected boolean isEmptyTag = false;

  protected int m_beginLine   = -1;
  protected int m_beginColumn = -1;
  protected int m_endLine     = -1;
  protected int m_endColumn   = -1;
  
  /* A String to hold the prefix part of a namespace element */
  protected String prefix = ""; 
  
  /* A String to hold the namespaceID that this element adheres to */
  protected String namespaceID = "";
  
  protected Map namespaceMap = new HashMap();

  public SimpleNode(int i) {
    id = i;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(XmlDocFragmentParserVisitor visitor, Object data)  {
     data = visitor.visit(this, data);
     data = childrenAccept(visitor,data);
    return data;
  }
  
   /* added this method so we could accept a generic tagged markup visitor */
  public Object jjtAccept(TaggedMarkupVisitor visitor, Object data)  {
     data = visitor.visit(this, data);
     data = childrenAccept(visitor,data);
    return data;
  }

/** Accept the visitor. **/
  public Object childrenAccept(XmlDocFragmentParserVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        data = children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }
  
   /* added this method so we could accept a generic tagged markup visitor */
  public Object childrenAccept(TaggedMarkupVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
          TaggedMarkupNode node = (TaggedMarkupNode)children[i];
          node.jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return XmlDocFragmentParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }
  public void setMarkedSectFlag(String strData)
  {
    m_markedSectFlag = strData.trim();
  }

  public String getMarkedSectFlag()
  {
    return m_markedSectFlag;
  }

  public void setNodeData(String strData)
  {
    m_nodeData = strData;
  }

  public String getNodeData()
  {
    return m_nodeData;
  }

  public void setTagName(String strData)
  {
    m_tagName = strData;
  }

  public String getTagName()
  {
    return m_tagName;
  }

  public void setBeginPos(int beginLine, int beginColumn, boolean update)
  {
    if(((m_beginLine == -1) && (m_beginColumn == -1)) || update)
    {
      m_beginLine   = beginLine;
      m_beginColumn = beginColumn;
    }
  }

  public void setEndPos(int endLine, int endColumn, boolean update)
  {
    if(((m_endLine == -1) && (m_endColumn == -1)) || update)
    {
      m_endLine   = endLine;
      m_endColumn = endColumn;
    }
  }

  public int getBeginLine()
  {
    return m_beginLine;
  }

  public int getEndLine()
  {
    return m_endLine;
  }

  public int getBeginColumn()
  {
    return m_beginColumn;
  }

  public int getEndColumn()
  {
    return m_endColumn;
  }

  public boolean isDisplayingNode()
  {
    return consts.isDisplayingNode(id);
  }

  public int getType()
  {
    return id;
  }


  protected void setHasAttribute(boolean hasAttribute){
	this.hasAttribute = hasAttribute;
  }

  public boolean hasAttribute(){
	return hasAttribute;
  }
  
  protected void setIsEmptyTag(boolean isEmptyTag){
	this.isEmptyTag = isEmptyTag;
  }

  public boolean isEmptyTag(){
	return isEmptyTag;
  }
  
  /**
   * Sets the prefix of the namespace of an element
   *
   * @param  thePrefix  The new prefix of the namespace of an element
   */ 
  protected void setPrefix(String thePrefix){
	this.prefix = thePrefix;
  }

  /**
   * Gets the prefix of the namespace of an element
   *
   * @return  The prefix of the namespace of an element
   */ 
  public String getPrefix(){
	return prefix;
  }
  
  /**
   * Gets the namespaceID that applies to this element
   * @return the namespaceID that applies to this element
   */
  public String getNamespaceID() {
      return namespaceID;
  }
  
   /**
   * Sets the namespaceID that applies to this element
   */
  public void setNamespaceID(String namespaceID){
    this.namespaceID = namespaceID;
  }
  
  public void setNamespaceMap(Map namespaceMap) {
      this.namespaceMap = namespaceMap;
  }
  
  
  public String getNamespaceID(String prefix) {
      try {
          String namespaceID = stripDoubleQuotes(
                (String) namespaceMap.get(prefix));
      } catch(NullPointerException ex) {
          return "";
      }
      
      return namespaceID;
  }
  
  private String stripDoubleQuotes(String quotedString) {
      return quotedString.substring(1, (quotedString.length() - 1));
  }
  
  public Map getNamespaceMap() {
      return this.namespaceMap;
  }
  
}

