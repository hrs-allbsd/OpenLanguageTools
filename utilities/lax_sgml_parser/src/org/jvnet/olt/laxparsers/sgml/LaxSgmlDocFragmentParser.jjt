
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

options{
  NODE_PACKAGE = "org.jvnet.olt.laxparsers.sgml";
  LOOKAHEAD=6;
  VISITOR = true;
  FORCE_LA_CHECK = true;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(LaxSgmlDocFragmentParser)

package org.jvnet.olt.laxparsers.sgml;



public class LaxSgmlDocFragmentParser
{
  protected boolean boolParsed = false;

  /**
   *  @exception  ParseException
   */
  public void parse()
    throws ParseException
  {
    //  Call top level rule.
    sgml_data();
    boolParsed = true;
  }

  /**
   *  walkParseTree:  This method provides an interface to allow node Visitors
   *  to be passed to the parse tree generated by this parser. 
   *  @param  visitor The visitor to act on all the nodes in the parse tree.
   *  @param  data    An object to be used as an aid to the tree walk.
   *  @exception Exception
   */
  public void walkParseTree(LaxSgmlDocFragmentParserVisitor visitor, Object data)
    throws Exception 
  {
    if(boolParsed && (visitor != null))
    {
      //  Get root node of the parse tree
      SimpleNode node =(SimpleNode) jjtree.rootNode();
      node.jjtAccept(visitor, data);
    }
    else
    {
      //  Throw an exception
      throw new Exception("Input stream not parsed");
    }
  }

  protected void finalize() throws Throwable
  {
    super.finalize();
  }
}

PARSER_END(LaxSgmlDocFragmentParser)

  //  Tokens
  //  Fixed length tokens

TOKEN:
{
  <CDATASECT:      "<![CDATA["  >
| <MARKEDSECT:     "<!["        >
| <COMMENT:        "<!--"       >
| <JSP_INLINE:     "<%="        >
| <JSP_TAG:        "<%"         >
| <PROC_INST:      "<?"         >
| <SECT_END:       "]]>"        >
| <COMMENT_END:    "-->"        >
| <JSP_END:        "%>"         >
| <ETAG:           "</"         >
| <STAG:           "<"          >
| <OSQRB:          "["  >
| <CSQRB:          "]"  >
| <TAGC:           ">"  >
| <EMPTY_TAGC:     "/>" >
}

//  Variable length tokens
TOKEN :
{
    <#LETTER:   ["a"-"z","A"-"Z"]   >
|   <#NUM:		["0"-"9"]			>
|   <#NCNAMECHAR:	<LETTER> | <NUM> | "." | "-" | "_"  >
|   <NAMEWORD:   ( <LETTER> | "_" ) ( <NCNAMECHAR> )*  >
}

TOKEN :
{
	<ENTITY: ("&" | "%") ( ~["<" , " " , "\t" , "\n", "\r", ";" ] )+ (";")? >
}

//  Supplimentary fixed length tokens.
TOKEN:
{
  <AMP:	           "&"  >
| <PCT:	           "%"  > 
}

//  Attributes tokens
//TOKEN :
//{  <#STRING_LIT:   "'" ( ~["'"] )* "'" | "\"" ( ~["\""] )* "\""  >
//|  <ATTRIBS:       (  <STRING_LIT> | ~[ ">", "\"", "'" ] )+    >
//}


//  Catch all tokens
TOKEN:
{
  <PCDATA:     ( ~["<", "\u0000", "&", "%", ">" , "]" , "[", "\r","\n","\b","\f"," ","\t"] )+   >
| <WHITESPACE: ( ["\r","\n","\b","\f"," ","\t"] )+	>
}


void entity() :
{
  Token t;
}
{
  t=<ENTITY> {
    jjtThis.setNodeData(t.image); 
  }
}

String entity_in_tag() :
{
  Token t;
}
{
  t=<ENTITY> {
    return (t.image); 
  }
}


void sgml_data() :
{}
{
  (comment()
| jsp_tag()
| jsp_inline()
| open_tag() 
| end_tag()
| pcdata() 
| cdata_sect()
| marked_sect_start()
| marked_sect_end()
| entity()
| processing_inst() )*
  eof()
}

void open_tag() :
{
  Token t;
  StringBuffer sAcc = new StringBuffer();
  String s    = "";
  String sTag = "";
}
{
  t=<STAG> { sAcc.append( t.image); }
  ( 
    (s = white_space() { sAcc.append(s); } )?
     sTag = name()   { sAcc.append(sTag); }
    (s = tag_data()  { sAcc.append(s); })?
    (s = close_tag() { sAcc.append(s); } )?
  )?
  { 
    jjtThis.setNodeData(sAcc.toString()); 
    jjtThis.setTagName(sTag);
  }
}

void end_tag() :
{
  Token t;
  StringBuffer sAcc = new StringBuffer();
  String s    = "";
  String sTag = "";
}
{
  t=<ETAG> { sAcc.append( t.image); }
  ( 
    (s = white_space() { sAcc.append(s); } )?
     sTag = name()   { sAcc.append(sTag); }
    (s = tag_data()  { sAcc.append(s); })?
    (s = close_tag() { sAcc.append(s); } )?
  )?
  { 
    jjtThis.setNodeData(sAcc.toString()); 
    jjtThis.setTagName(sTag);
  }
}

void comment() :
{
  Token t;
  StringBuffer sAcc = new StringBuffer();
  String s    = "";
}
{
  t=<COMMENT> { sAcc.append(t.image); }
    (s = comment_data()  { sAcc.append(s); })?
    (s = close_comment() { sAcc.append(s); } )?
  { jjtThis.setNodeData(sAcc.toString()); }
}

void cdata_sect() :
{
  Token t;
  StringBuffer sAcc = new StringBuffer();
  String s    = "";
}
{
  t=<CDATASECT> { sAcc.append( t.image); }
    (s = sect_data()  { sAcc.append(s); } )?
    (s = close_sect()       { sAcc.append(s); } )?
  { jjtThis.setNodeData(sAcc.toString()); }
}


void processing_inst() :
{
  Token t;
  StringBuffer sAcc = new StringBuffer();
  String s    = "";
}
{
  t=<PROC_INST> { sAcc.append( t.image); }
  (s = tag_data()  { sAcc.append(s); })?
  (s = close_tag() { sAcc.append(s); } )?  
  { jjtThis.setNodeData(sAcc.toString()); }
}

void jsp_tag() :
{
  Token t;
  StringBuffer sAcc = new StringBuffer();
  String s    = "";
}
{
  t=<JSP_TAG> { sAcc.append( t.image); }
  (s = jsp_tag_data()  { sAcc.append(s); })?
  (s = close_jsp() { sAcc.append(s); } )?
  { jjtThis.setNodeData(sAcc.toString()); }
}

void jsp_inline() :
{
  Token t;
  StringBuffer sAcc = new StringBuffer();
  String s    = "";
}
{
  t=<JSP_INLINE> { sAcc.append( t.image); }
    (s = jsp_tag_data()  { sAcc.append(s); })?
    (s = close_jsp() { sAcc.append(s); } )?
  { jjtThis.setNodeData(sAcc.toString()); }
}


String close_jsp() :
{
  Token t;
}
{
  t=<JSP_END> { return t.image; }
}

String close_sect() :
{
  Token t;
}
{
  t=<SECT_END> { return t.image; }
}

String close_tag() :
{
  Token t;
}
{
  (t=<TAGC>       { return t.image; }
|  t=<EMPTY_TAGC> { return t.image; } )
}

String close_comment() :
{
  Token t;
}
{
  t=<COMMENT_END> { return t.image; }
}

String white_space() :
{  
  Token t;
}
{
  t=<WHITESPACE> { return t.image; }
}


//  Token gobbling productions
String tag_data() :
{
  String s = "";
  StringBuffer sAcc = new StringBuffer();
}
{
  (
   s=close_sect() { sAcc.append(s); }
|  s=close_comment() { sAcc.append(s); }
|  s=close_jsp() { sAcc.append(s); }
|  s=char_data() { sAcc.append(s); }
|  s=entity_in_tag() { sAcc.append(s); }
|  s=block_opens()   { sAcc.append(s); }
  )+
  { return sAcc.toString(); }
}

String comment_data() :
{
  String s = "";
  StringBuffer sAcc = new StringBuffer();
}
{
  (
   s=close_sect() { sAcc.append(s); }
|  s=close_tag() { sAcc.append(s); }
|  s=close_jsp() { sAcc.append(s); }
|  s=char_data() { sAcc.append(s); }
|  s=entity_in_tag() { sAcc.append(s); }
|  s=block_opens()   { sAcc.append(s); }
  )+
  { return sAcc.toString(); }
}

String sect_data() :
{
  String s = "";
  StringBuffer sAcc = new StringBuffer();
}
{
  (
   s=close_tag() { sAcc.append(s); }
|  s=close_comment() { sAcc.append(s); }
|  s=close_jsp() { sAcc.append(s); }
|  s=char_data() { sAcc.append(s); }
|  s=entity_in_tag() { sAcc.append(s); }
|  s=block_opens()   { sAcc.append(s); }
  )+
  { return sAcc.toString(); }
}


String jsp_tag_data() :
{
  String s = "";
  StringBuffer sAcc = new StringBuffer();
}
{
  (
   s=close_sect() { sAcc.append(s); }
|  s=close_tag() { sAcc.append(s); }
|  s=close_comment() { sAcc.append(s); }
|  s=char_data() { sAcc.append(s); }
|  s=entity_in_tag() { sAcc.append(s); }
|  s=block_opens()   { sAcc.append(s); }
  )+
  { return sAcc.toString(); }
}



void marked_sect_start() :
{
  Token t;
  String s = "";
  StringBuffer sAcc = new StringBuffer();
  String sFlag = "";
}
{
  t=<MARKEDSECT>     { sAcc.append( t.image); }
  ( s=white_space()  { sAcc.append(s); } )?
  ( 
   ( sFlag=name()    { sAcc.append(sFlag); } |
     sFlag=entity_in_tag() { sAcc.append(sFlag); } 
   )
   ( s=white_space()  { sAcc.append(s); } )?  
  )?
  (t=<OSQRB>         { sAcc.append( t.image); })?
  { 
    jjtThis.setNodeData(sAcc.toString());
    if(sFlag.equals("")) {
      sFlag = "INCLUDE";
    }
    jjtThis.setMarkedSectionFlag(sFlag);
  }
}

String block_opens() :
{
  Token t;
}
{
  (
   t=<STAG>
|  t=<COMMENT>
|  t=<CDATASECT>
|  t=<JSP_TAG>
|  t=<JSP_INLINE>
  )
  { return t.image; }
}

void marked_sect_end() :
{
  String s= "";
}
{
  s=close_sect() { jjtThis.setNodeData(s); }
}


//  Character data stuff
String char_data() :
{
   Token t;
   StringBuffer sAcc = new StringBuffer();
}
{
  (t=<PCDATA>     { sAcc.append( t.image); }
|  t=<WHITESPACE> { sAcc.append( t.image); }
|  t=<AMP>        { sAcc.append( t.image); }
|  t=<PCT>        { sAcc.append( t.image); }
|  t=<NAMEWORD>   { sAcc.append( t.image); }
|  t=<OSQRB>      { sAcc.append( t.image); }
|  t=<CSQRB>      { sAcc.append( t.image); }
  )+
  { return sAcc.toString(); }
}

void pcdata() :
{
   String s = "";
   StringBuffer sAcc = new StringBuffer();
}
{
   (
    s=char_data() { sAcc.append(s); }
|   s=close_tag() { sAcc.append(s); }
   )+
   { jjtThis.setNodeData(sAcc.toString()); }
}

String name() :
{
  Token t;
}
{
  t=<NAMEWORD>   { return t.image; }
}

void eof() :
{
  Token t;
}
{
  t=<EOF> { jjtThis.setNodeData(t.image); }
}
