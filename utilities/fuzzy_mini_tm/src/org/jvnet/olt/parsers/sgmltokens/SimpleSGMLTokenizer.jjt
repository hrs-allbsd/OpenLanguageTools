
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

options{
  NODE_PACKAGE = "org.jvnet.olt.parsers.sgmltokens";
  LOOKAHEAD=1;
  VISITOR = true;
  FORCE_LA_CHECK = true;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(SimpleSGMLTokenizer)

package org.jvnet.olt.parsers.sgmltokens;

public class SimpleSGMLTokenizer
{
  protected boolean boolParsed = false;

  /**
   *  @throws  ParseException
   */
  public void parse()
    throws ParseException
  {
    //  Call top level rule.
    tagged_string();
    boolParsed = true;
  }

  /**
   *  walkParseTree:  This method provides an interface to allow node Visitors
   *  to be passed to the parse tree generated by this parser. 
   *  @param  visitor The visitor to act on all the nodes in the parse tree.
   *  @param  data    An object to be used as an aid to the tree walk.
   *  @exception Exception
   */
  public void walkParseTree(SimpleSGMLTokenizerVisitor visitor, Object data)
    throws Exception 
  {
    if(boolParsed && (visitor != null))
    {
      //  Get root node of the parse tree
      SimpleNode node =(SimpleNode) jjtree.rootNode();
      node.jjtAccept(visitor, data);
    }
    else
    {
      //  Throw an exception
      throw new Exception("Input stream not parsed");
    }
  }
  protected void finalize() throws Throwable
  {
    super.finalize();
  }
}

PARSER_END(SimpleSGMLTokenizer)



/*  Comments */
MORE :
{
  "<!--" : IN_COMMENT
}

<IN_COMMENT>
TOKEN :
{
  <COMMENT: "-->" > : DEFAULT
}

/*  Start of a CDATA section */
TOKEN :
{
  <SCDATA: "<![CDATA[" > 
}

/*  Processing Instructions */
MORE :
{
  "<?" : IN_PI
}

<IN_PI>
TOKEN :
{
  <PI: ">" > : DEFAULT
}

MORE :
{
  "<![" : IN_START_MRK_SECT
}

<IN_START_MRK_SECT>
TOKEN :
{
  <SMARKSECT: "[" > : DEFAULT
}

<IN_COMMENT,
IN_START_MRK_SECT,
IN_PI>
MORE :
{
  < ~[] >
}

/*  Tags and bracket tokens */
TOKEN :
{
        <ESECT:  "]]>"  >
|	<STAGO:		"<"				>	: TAG
|	<ETAGO:		"</"				>	: TAG
|       <OSQRB:         "["                             >
|       <CSQRB:         "]"                             >
|       <GT:        ">"                             >
|	<PCDATA:	( ~["<" , ">" , "]" , "["] )+			> 
}

<TAG>
TOKEN :
{
        <#ALPHA:	["a"-"z","A"-"Z","_","-","."]	>
|       <#COLON:        ":"                             >
|	<#NUM:		["0"-"9"]			>
|	<#ALPHANUM:	<ALPHA> | <NUM>			>        
|       <TAGNAME:       <ALPHA> (<COLON>)? ( <ALPHANUM> | <COLON> )*         >   : ATTLIST 
}


<TAG, ATTLIST>
TOKEN :
{
	<TAGC:		">"				>	: DEFAULT
}

<ATTLIST> TOKEN :
{
        <#STRING_LIT: "'" ( ~["'"] )* "'" | "\"" ( ~["\""] )* "\""  >
|       <ATTRIBS:       (  <STRING_LIT> | ~[ ">", "\"", "'" ] )+    >
}


//
//  Productions.
//

void tagged_string() :
{}
{
  ( pcdata() 
  | open_tag() 
  | close_tag() 
  | processing_inst() 
  | comment()
  | cdata_section()
  | marked_section()
  | section_end()
  )*
}

void cdata_section() :
{
  Token t;
}
{
  t=<SCDATA> { jjtThis.setNodeData(t.image); }
}

void marked_section() :
{
  Token t;
}
{
  t=<SMARKSECT> { jjtThis.setNodeData(t.image); }
}

void section_end() :
{
  Token t;
}
{
  t=<ESECT> { jjtThis.setNodeData(t.image); }
}


void comment() :
{
  Token t;
}
{
  t=<COMMENT> { jjtThis.setNodeData(t.image); }
}

void processing_inst() :
{
  Token t;
}
{
  t=<PI> { jjtThis.setNodeData(t.image); }
}

void pcdata() :
{
  Token t;
  String s = "";
}
{
  ( t=<PCDATA>   { s = t.image; } 
    | t=<OSQRB>  { s = t.image; } 
    | t=<CSQRB>  { s = t.image; } 
    | t=<GT> { s = t.image; } 
  )
  { jjtThis.setNodeData(s); } 
}

void open_tag() :
{
  Token t;
  String s = "";  
}
{
  (
    t=<STAGO> { s += t.image; }
    t=<TAGNAME>  { s += t.image; jjtThis.setTagName(t.image); }
    ( t=<ATTRIBS>  { s += t.image; jjtThis.setTagWithAttribs( true ); } )?
    t=<TAGC> { s += t.image; }    
  )
  {  jjtThis.setNodeData(s); }    

}

void close_tag() :
{
  Token t;
  String s = "";  
}
{
  (
    t=<ETAGO> { s += t.image; }
    ( t=<TAGNAME>  { s += t.image;  
                     jjtThis.setTagName(t.image); } 
    )?  /* '?' included to cover possible tag minimization */
    t=<TAGC> { s += t.image; }    
  )
  {  jjtThis.setNodeData(s); }  
}
