
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/*
 * File:           XliffParser.java
 * Date:           14 July 2003  15:20
 *
 * @author  jc73554
 * @version generated by NetBeans XML module
 */
package org.jvnet.olt.xliffparser;

import org.jvnet.olt.xliff.XliffDocument;
import java.io.IOException;
import java.net.URL;
import java.util.Stack;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.*;
import org.xml.sax.helpers.AttributesImpl;

/**
 * The class reads XML documents according to specified DTD and
 * translates all related events into XliffProcessor events.
 * <p>Usage sample:
 * <pre>
 *    XliffParser parser = new XliffParser(...);
 *    parser.parse(new InputSource("..."));
 * </pre>
 * <p><b>Warning:</b> the class is machine generated. DO NOT MODIFY</p>
 *
 */
public class XliffParser implements ContentHandler {
    
    private java.lang.StringBuffer buffer;
    
    private XliffProcessor handler;
    
    private Stack context;
    
    private EntityResolver resolver;
    
    /**
     * Creates a parser instance.
     * @param handler handler interface implementation (never <code>null</code>
     * @param resolver SAX entity resolver implementation or <code>null</code>.
     * It is recommended that it could be able to resolve at least the DTD.
     */
    public XliffParser(final XliffProcessor handler, final EntityResolver resolver) {
        this.handler = handler;
        this.resolver = resolver;
        buffer = new StringBuffer(111);
        context = new Stack();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void setDocumentLocator(Locator locator) {
        handler.setDocumentLocator(locator);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void startDocument() throws SAXException {
        handler.startDocument();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void endDocument() throws SAXException {
        handler.endDocument();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void startElement(java.lang.String ns, java.lang.String name, java.lang.String qname, Attributes attrs) throws SAXException {
        dispatch(true);
        context.push(new Object[] {qname, new AttributesImpl(attrs)});
        if ("mrk".equals(qname)) {
            handler.start_mrk(attrs);
        } else if ("bin-unit".equals(qname)) {
            handler.start_bin_unit(attrs);
        } else if ("sub".equals(qname)) {
            handler.start_sub(attrs);
        } else if ("file".equals(qname)) {
            handler.start_file(attrs);
        } else if ("target".equals(qname)) {
            handler.start_target(attrs);
        } else if ("xliff".equals(qname)) {
            handler.start_xliff(attrs);
        } else if ("bx".equals(qname)) {
            handler.handle_bx(attrs);
        } else if ("prop-group".equals(qname)) {
            handler.start_prop_group(attrs);
        } else if ("skl".equals(qname)) {
            handler.start_skl(attrs);
        } else if ("trans-unit".equals(qname)) {
            handler.start_trans_unit(attrs);
        } else if ("phase".equals(qname)) {
            handler.start_phase(attrs);
        } else if ("body".equals(qname)) {
            handler.start_body(attrs);
        } else if ("group".equals(qname)) {
            handler.start_group(attrs);
        } else if ("ept".equals(qname)) {
            handler.start_ept(attrs);
        } else if ("header".equals(qname)) {
            handler.start_header(attrs);
        } else if ("ph".equals(qname)) {
            handler.start_ph(attrs);
        } else if ("g".equals(qname)) {
            handler.start_g(attrs);
        } else if ("ex".equals(qname)) {
            handler.handle_ex(attrs);
        } else if ("phase-group".equals(qname)) {
            handler.start_phase_group(attrs);
        } else if ("external-file".equals(qname)) {
            handler.handle_external_file(attrs);
        } else if ("alt-trans".equals(qname)) {
            handler.start_alt_trans(attrs);
        } else if ("context-group".equals(qname)) {
            handler.start_context_group(attrs);
        } else if ("bpt".equals(qname)) {
            handler.start_bpt(attrs);
        } else if ("it".equals(qname)) {
            handler.start_it(attrs);
        } else if ("count-group".equals(qname)) {
            handler.start_count_group(attrs);
        } else if ("bin-source".equals(qname)) {
            handler.start_bin_source(attrs);
        } else if ("glossary".equals(qname)) {
            handler.start_glossary(attrs);
        } else if ("source".equals(qname)) {
            handler.start_source(attrs);
        } else if ("x".equals(qname)) {
            handler.handle_x(attrs);
        } else if ("bin-target".equals(qname)) {
            handler.start_bin_target(attrs);
        } else if ("reference".equals(qname)) {
            handler.start_reference(attrs);
        }
        handler.startElement(ns, name, qname, attrs);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void endElement(java.lang.String ns, java.lang.String name, java.lang.String qname) throws SAXException {
        dispatch(false);
        context.pop();
        if ("mrk".equals(qname)) {
            handler.end_mrk();
        } else if ("bin-unit".equals(qname)) {
            handler.end_bin_unit();
        } else if ("sub".equals(qname)) {
            handler.end_sub();
        } else if ("file".equals(qname)) {
            handler.end_file();
        } else if ("target".equals(qname)) {
            handler.end_target();
        } else if ("xliff".equals(qname)) {
            handler.end_xliff();
        } else if ("prop-group".equals(qname)) {
            handler.end_prop_group();
        } else if ("skl".equals(qname)) {
            handler.end_skl();
        } else if ("trans-unit".equals(qname)) {
            handler.end_trans_unit();
        } else if ("phase".equals(qname)) {
            handler.end_phase();
        } else if ("body".equals(qname)) {
            handler.end_body();
        } else if ("group".equals(qname)) {
            handler.end_group();
        } else if ("ept".equals(qname)) {
            handler.end_ept();
        } else if ("header".equals(qname)) {
            handler.end_header();
        } else if ("ph".equals(qname)) {
            handler.end_ph();
        } else if ("g".equals(qname)) {
            handler.end_g();
        } else if ("phase-group".equals(qname)) {
            handler.end_phase_group();
        } else if ("alt-trans".equals(qname)) {
            handler.end_alt_trans();
        } else if ("context-group".equals(qname)) {
            handler.end_context_group();
        } else if ("bpt".equals(qname)) {
            handler.end_bpt();
        } else if ("it".equals(qname)) {
            handler.end_it();
        } else if ("count-group".equals(qname)) {
            handler.end_count_group();
        } else if ("bin-source".equals(qname)) {
            handler.end_bin_source();
        } else if ("glossary".equals(qname)) {
            handler.end_glossary();
        } else if ("source".equals(qname)) {
            handler.end_source();
        } else if ("bin-target".equals(qname)) {
            handler.end_bin_target();
        } else if ("reference".equals(qname)) {
            handler.end_reference();
        }
        handler.endElement(ns, name, qname);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void characters(char[] chars, int start, int len) throws SAXException {
        buffer.append(chars, start, len);handler.characters(chars, start, len);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void ignorableWhitespace(char[] chars, int start, int len) throws SAXException {
        handler.ignorableWhitespace(chars, start, len);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void processingInstruction(java.lang.String target, java.lang.String data) throws SAXException {
        handler.processingInstruction(target, data);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void startPrefixMapping(final java.lang.String prefix, final java.lang.String uri) throws SAXException {
        handler.startPrefixMapping(prefix, uri);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void endPrefixMapping(final java.lang.String prefix) throws SAXException {
        handler.endPrefixMapping(prefix);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void skippedEntity(java.lang.String name) throws SAXException {
        handler.skippedEntity(name);
    }
    
    private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
        if (fireOnlyIfMixed && buffer.length() == 0) return; //skip it
        
        Object[] ctx = (Object[]) context.peek();
        String here = (String) ctx[0];
        Attributes attrs = (Attributes) ctx[1];
        if ("mrk".equals(here)) {
            handler.handle_mrk(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("sub".equals(here)) {
            handler.handle_sub(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("target".equals(here)) {
            handler.handle_target(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("internal-file".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_internal_file(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("context".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_context(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("prop".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_prop(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("ept".equals(here)) {
            handler.handle_ept(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("ph".equals(here)) {
            handler.handle_ph(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("g".equals(here)) {
            handler.handle_g(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("note".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_note(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("bpt".equals(here)) {
            handler.handle_bpt(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("it".equals(here)) {
            handler.handle_it(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("source".equals(here)) {
            handler.handle_source(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("count".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_count(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else {
            //do not care
        }
        buffer.delete(0, buffer.length());
        
    }
    
    public void parse(XliffDocument masterDoc) throws SAXException, ParserConfigurationException, IOException {
        InputSource input = new InputSource(masterDoc.getXliffReader());
        if(input == null) { System.err.println("The XLIFF reader is null"); }
        parse(input, this);
    }
    
    
    /**
     * The recognizer entry method taking an InputSource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public void parse(final InputSource input) throws SAXException, ParserConfigurationException, IOException {
        parse(input, this);
    }
    
    /**
     * The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public void parse(final URL url) throws SAXException, ParserConfigurationException, IOException {
        parse(new InputSource(url.toExternalForm()), this);
    }
    
    /**
     * The recognizer entry method taking an Inputsource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public static void parse(final InputSource input, final XliffProcessor handler) throws SAXException, ParserConfigurationException, IOException {
        parse(input, new XliffParser(handler, null));
    }
    
    /**
     * The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public static void parse(final URL url, final XliffProcessor handler) throws SAXException, ParserConfigurationException, IOException {
        parse(new InputSource(url.toExternalForm()), handler);
    }
    
    private static void parse(final InputSource input, final XliffParser recognizer) throws SAXException, ParserConfigurationException, IOException {
        SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setValidating(true);  //the code was generated according DTD
        factory.setNamespaceAware(true);  //the code was generated according DTD
        XMLReader parser = factory.newSAXParser().getXMLReader();
        parser.setContentHandler(recognizer);
        parser.setErrorHandler(recognizer.getDefaultErrorHandler());
        if (recognizer.resolver != null)
        {
            parser.setEntityResolver(recognizer.resolver);
        }
        parser.parse(input);
    }
    
    /**
     * Creates default error handler used by this parser.
     * @return org.xml.sax.ErrorHandler implementation
     *
     */
    protected ErrorHandler getDefaultErrorHandler() {
        return new ErrorHandler() {
            public void error(SAXParseException ex) throws SAXException  {
                if (context.isEmpty()) System.err.println("Missing DOCTYPE.");
                throw ex;
            }
            
            public void fatalError(SAXParseException ex) throws SAXException {
                throw ex;
            }
            
            public void warning(SAXParseException ex) throws SAXException {
                // ignore
            }
        };
        
    }
    
}

