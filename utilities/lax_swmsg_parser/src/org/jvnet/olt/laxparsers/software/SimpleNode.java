
/*
 * Copyright  2005 Sun Microsystems, Inc. 
 * All rights reserved Use is subject to license terms.
 *
 */

/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package org.jvnet.olt.laxparsers.software;

public class SimpleNode implements Node, LaxSoftwareMessageParserTreeConstants {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected LaxSoftwareMessageParser parser;

  /** Holds value of property nodeData. */
  protected String nodeData = "";
  
  /** Holds value of property tagName. */
  private String tagName = "";

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(LaxSoftwareMessageParser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(LaxSoftwareMessageParserVisitor visitor, Object data) {
    data = visitor.visit(this, data);
    data = childrenAccept(visitor,data);
    return data;
    //return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public Object childrenAccept(LaxSoftwareMessageParserVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        data = children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return LaxSoftwareMessageParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }
  
  public int getType()
  {
    return id;
  }

  /**
   * Setter for property nodeData
   * @param tagName New value of property nodeData
   */
  public void setNodeData(String nodeData)
  {
    this.nodeData = nodeData;
  }

  /** 
   * Getter for property nodeData
   * @return Value of property nodeData
   */
  public String getNodeData()
  {
    return this.nodeData;
  }

  /** 
   * Setter for property tagName.
   * @param tagName New value of property tagName.
   */
  public void setTagName(String tagName) {
      this.tagName = tagName;
  }

  /** 
   * Getter for property tagName.
   * @return Value of property tagName.
   */
  public String getTagName() {
    return this.tagName;
  }

  public boolean isDisplayingNode() {
    int foo = id;
    switch(id) {
      case JJTENTITY:
      case JJTOPEN_TAG:
      case JJTEND_TAG:
      case JJTDATA:
      case JJTEOF:
        return true;
      default:
        return false;
    }
  }
  
}

