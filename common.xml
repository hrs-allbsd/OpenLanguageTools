<?xml version="1.0"?>

<project name="common" default="all">
    <!-- the main build script loads its properties first, so these get loaded
    only when building locally -->
    <property file="build.local.properties"/>

    <!-- fallback to common properties in project root; we do this for directories
         which do not have build.local.properties
    -->

    <dirname property="common.basedir" file="${ant.file.common}"/>
    <property file="${common.basedir}/common.properties"/>


    <!-- default source files location -->
    <path id="src.dirs">
    <path location="src"/>
    </path>
    <!-- default pattern for compilation -->
    <patternset id="src.pattern">
        <include name="**/*.java"/>
    </patternset>

    <!-- default test source files fileset; to exclude/include any tests
                not in src with different name patter than *Test.java
                override this fileset in your build.local.properties
        -->
    <fileset id="test.src" dir="src">
        <patternset refid="test.src.pattern"/>
    </fileset>

    <!-- default pattern for tests -->
    <patternset id="test.src.pattern">
        <include name="**/*Test.java"/>
    </patternset>


    <!-- DEPENDENCIES DEFINITIONS
        The paths here are dependencies for targets. Each script that compiles
        some sources needs to define path with id build.classpath which will
        be used for compilation of sources

        Example:
        <project ...>
            <path id="build.classpath">
               <path refid="deps.lib1"/>    //use deps.lib1 jars for compilation
               <path refid="deps.junit"/>    //use junit jars for compilation
            </path>

        </project>

    -->
    <!-- jars in lib/lib1 -->
    <path id="deps.utilities">
        <fileset dir="${common.basedir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- jars in lib/lib2 -->
    <path id="deps.dtdparser">
        <fileset dir="${extlib.dir}" includes="dtdparser121.jar"/>
    </path>

    <!-- TODO download the rest of the api jar (JWSDP) get rid of S1AS deps -->
    <path id="deps.jax-rpc">
        <fileset dir="${common.basedir}/utilities/iAS7/share/lib/" includes="*.jar"/>
    </path>

    <!-- these deps contain both versions of dependencies: for st2 and editor so subsequent
        builds may seem to be working even though they are not -->
    <path id="deps.common.util">
        <fileset dir="${dest.dir}/" includes="tt-common.jar"/>
        <fileset dir="${dest.dir}/" includes="utilities-editor.jar"/>
        <fileset dir="${dest.dir}/" includes="utilities-fuzzytm.jar"/>
    </path>
    <path id="deps.filters">
        <fileset dir="${dest.dir}/" includes="filters.jar"/>
        <fileset dir="${dest.dir}/" includes="filters-editor.jar"/>
    </path>


    <path id="deps.formatters">
        <fileset dir="${dest.dir}/" includes="formatting.jar"/>
        <fileset dir="${dest.dir}/" includes="formatting-editor.jar"/>
    </path>
    <path id="deps.backconv">
        <fileset dir="${dest.dir}/" includes="backconv.jar"/>
    </path>

    <path id="deps.editor.libs">
        <fileset dir="${common.basedir}/utilities/jars/"
   includes="**/*.jar"
   excludes="fuzzytm.jar,XliffBackConverter.jar"/>
    </path>

    <path id="deps.swing-layout">
        <fileset dir="${extlib.dir}/swing-layout" includes="swing-layout-*.jar"/>
    </path>

    <!-- jars for Saxon9HE -->
    <path id="deps.saxon">
        <fileset dir="${extlib.dir}/saxon" includes="saxon9he.jar"/>
    </path>

    <!-- jars in lib/junit -->
    <path id="deps.junit">
        <fileset dir="${common.basedir}/utilities/jars">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- dom4j dependecies -->
    <path id="deps.dom4j">
        <fileset dir="${extlib.dir}" includes="dom4j-161.jar"/>
    </path>

    <!-- common classpath; include build.dir -->
    <path id="common.build.classpath">
    <path refid="build.classpath"/>
        <pathelement location="${build.dir}"/>
    </path>

    <!-- TASKS DEFINITIONS -->



    <!-- COMMON TARGETS -->

        <!--
                Initialize the build  enviroment:
                - create the destination directory
        - timestamp
        -->
    <target name="init" depends="banner">
        <echo>Creating destination directory: ${build.dir}</echo>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dest.dir}"/>
        <tstamp/>
    </target>

    <!--
                Do all you need to before compiling
        -->
    <target name="pre-compile" depends="init">
        <echo>pre-compile</echo>
    </target>

    <!--
                compile sources
        -->
    <fileset id="x1">
        <include name="**/X*.java"/>
    </fileset>

    <target name="compile" depends="pre-compile">
        <echo>compile</echo>
        <javac
            target="${platform.version}"
            destdir="${build.dir}"
            classpathref="common.build.classpath"
            debug="${compiler.debug}"
            verbose="${compiler.verbose}">
            <patternset refid="src.pattern"/>
            <src refid="src.dirs"/>
        </javac>
    </target>

    <!--
        make deliverables: [jwe]ar files
    -->
    <target name="dist" depends="compile">
        <echo>dist</echo>
    </target>

    <!--
                restore build enviroment
        -->
    <target name="clean">
        <echo>clean</echo>
        <echo>Removing build directory</echo>
        <delete dir="${build.dir}"/>
        <echo>Removing any JavaCC artifacts</echo>
        <delete>
            <fileset dir="." includes="**/*.jj" />
        </delete>
    </target>

    <!--
                print what and where is being built
        -->
    <target name="banner">
        <echo>*******************************************</echo>
        <echo>Building ${ant.project.name} in</echo>
        <echo>${ant.file}</echo>
        <echo>*******************************************</echo>
    </target>

    <path id="common.test.classpath">
    <path refid="test.classpath"/>
        <pathelement location="${build.dir}"/>
    </path>

    <!-- unittests targets -->
    <!-- test.src fileset must be to contain all JAVA! files which are tests
         test.classpath must be set
    -->
    <target name="pre-test" depends="compile">
        <mkdir dir="${build.dir}/junit-reports"/>
        <mkdir dir="${build.dir}/test-results"/>

    </target>

    <target name="test" depends="pre-test">
        <mkdir dir="${build.dir}/junit-reports"/>

        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="common.test.classpath"/>
            </classpath>

            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=${test.debug.suspend},address=${test.debug.port}"/>
            <!-- support for transparent directories; see TestSupport class -->
            <sysproperty key="junit.output.dir" value="${build.dir}/test-results"/>

            <formatter type="xml"/>

            <test fork="yes" todir="${build.dir}/junit-reports" name="${test.single.class}" if="do.single.test"/>

            <batchtest fork="yes" todir="${build.dir}/junit-reports" unless="do.single.test">
                <fileset refid="test.src"/>
            </batchtest>
        </junit>

        <junitreport todir="${build.dir}/junit-reports">
            <fileset dir="${build.dir}/junit-reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/junit-reports/html"/>
        </junitreport>
    </target>

    <!-- test single unit test -->
    <target name="test-single">
        <fail unless="test.single.class">Set property test.single.class to the classname of file to run</fail>
        <antcall target="test">
            <param name="do.single.test" value="yes"/>
        </antcall>
    </target>

    <!-- run it all -->
    <target name="all" depends="dist">
        <echo>all</echo>
    </target>


    <!-- upload a nightly build to java.net -->
    <!-- requires build.ant.properties to contain username/passwd details -->
    <!-- properties : java.net.username == username
                      java.net.passwd == password
                      uploaded.file.name == name of file to appear on java.net
                      uploaded.file.dir == name of directory on java.net
                      path.to.file == file in build area to upload
                      description == description of file
    -->
    <path id="upload.file.class.path">
        <fileset dir="${common.basedir}/external/build/javanettasks" includes="**/*.jar"/>
    </path>


    <!-- this does java.net uploads to allow us to do nightly builds
       Username and pasword information is accessed from a file in
      ~/.java.net with contents similar to :
      userName=timf
      password=yadayada
      proxyServer=proxy.acme.com
      proxyPort=8080
     -->
    <target name="upload">
        <taskdef name="javaNetUpload"
          classname="org.kohsuke.jnt.ant.FileUploadTask"
          classpathref="upload.file.class.path"/>
        <echo>Uploading file ${path.to.file} to ${uploaded.file.dir}/${uploaded.file.name}</echo>
        <javaNetUpload
            projectName="open-language-tools"
            toFile="${uploaded.file.dir}/${uploaded.file.name}"
            fromFile="${path.to.file}"
            fileDescription="${uploaded.file.description}"
            overwrite="yes"
            fileStatus="Draft"
            />

    </target>

</project>
