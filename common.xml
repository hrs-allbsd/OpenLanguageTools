<?xml version="1.0"?>

<project name="common" default="all">
    <!-- the main build script loads its properties first, so these get loaded
    only when building locally -->
    <property file="build.local.properties"/>

    <!-- fallback to common properties in project root; we do this for directories
         which do not have build.local.properties
    -->

    <dirname property="common.basedir" file="${ant.file.common}"/>
	<property file="${common.basedir}/common.properties"/>


	<!-- default source files location -->
	<path id="src.dirs">
		<path location="src"/>
	</path>
    <!-- default pattern for compilation -->
    <patternset id="src.pattern">
        <include name="**/*.java"/>
    </patternset>

    <!-- DEPENDENCIES DEFINITIONS
        The paths here are dependencies for targets. Each script that compiles
        some sources needs to define path with id build.classpath which will
        be used for compilation of sources

        Example:
        <project ...>
            <path id="build.classpath">
               <path refid="deps.lib1"/>    //use deps.lib1 jars for compilation
               <path refid="deps.junit"/>    //use junit jars for compilation
            </path>

        </project>

    -->
    <!-- jars in lib/lib1 -->
    <path id="deps.utilities">
        <fileset dir="${common.basedir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- jars in lib/lib2 -->
    <path id="deps.dtdparser">
        <path location="${common.basedir}/utilities/jars/dtdparser121.jar"/>
    </path>

    <path id="deps.jaxb">
		<fileset dir="${common.basedir}/utilities/jars/jwsdp-1.5/jaxb/lib" includes="*.jar"/>
		<fileset dir="${common.basedir}/utilities/jars/jwsdp-1.5/jwsdp-shared/lib" includes="*.jar"/>
    </path>

	<!-- TODO download the rest of the api jar (JWSDP) get rid of S1AS deps -->
    <path id="deps.jax-rpc">
		<fileset dir="${common.basedir}/utilities/iAS7/share/lib/" includes="*.jar"/>
    </path>
	
	<!-- these deps contain both versions of dependencies: for st2 and editor so subsequent
	builds may seem to be working even though they are not -->
    <path id="deps.common.util">
		<fileset dir="${dest.dir}/" includes="tt-common.jar"/>
		<fileset dir="${dest.dir}/" includes="utilities-editor.jar"/>
		<fileset dir="${dest.dir}/" includes="utilities-fuzzytm.jar"/>
    </path>
    <path id="deps.filters">
		<fileset dir="${dest.dir}/" includes="filters.jar"/>
		<fileset dir="${dest.dir}/" includes="filters-editor.jar"/>
    </path>


    <path id="deps.formatters">
		<fileset dir="${dest.dir}/" includes="formatting.jar"/>
		<fileset dir="${dest.dir}/" includes="formatting-editor.jar"/>
    </path>
    <path id="deps.backconv">
		<fileset dir="${dest.dir}/" includes="backconv.jar"/>
    </path>

	<path id="deps.editor.libs">
		<fileset dir="${common.basedir}/utilities/jars/"
	   	    includes="**/*.jar" 
		    excludes="fuzzytm.jar,XliffBackConverter.jar"/>
	</path>

	<path id="deps.xerces">
		<fileset dir="${common.basedir}/utilities/jars" includes="xerces2.jar xmlParserAPIs.jar"/>
	</path>

    <!-- jars in lib/junit -->
    <path id="deps.junit">
        <fileset dir="${common.basedir}/lib/junit">
            <include name="**/*.jar"/>
        </fileset>
    </path>

	<!-- common classpath; include build.dir -->
	<path id="common.build.classpath">
		<path refid="build.classpath"/>
		<pathelement location="${build.dir}"/>
	</path>
	
    <!-- TASKS DEFINITIONS -->



    <!-- COMMON TARGETS -->

	<!--
		Initialize the build  enviroment:
		- create the destination directory
        - timestamp
	-->
	<target name="init" depends="banner">
		<echo>Creating destination directory: ${build.dir}</echo>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dest.dir}"/>
        <tstamp/>
	</target>

	<!--
		Do all you need to before compiling
	-->
	<target name="pre-compile" depends="init">
		<echo>pre-compile</echo>
	</target>

	<!--
		compile sources
	-->
    <fileset id="x1">
        <include name="**/X*.java"/>
    </fileset>

	<target name="compile" depends="pre-compile">
		<echo>compile</echo>
		<javac
            destdir="${build.dir}"
            debug="${compiler.debug}"
            classpathref="common.build.classpath">
            <patternset refid="src.pattern"/>
			<src refid="src.dirs"/>
		</javac>
        <!--
		<echo>reset src.dirs path to src</echo>
  		<path id="src.dirs">
			<path location="src"/>
  		</path>
          -->
	</target>

    <!--
        make deliverables: [jwe]ar files
    -->
	<target name="dist" depends="compile">
		<echo>dist</echo>
	</target>

	<!--
		restore build enviroment
	-->
	<target name="clean">
		<echo>clean</echo>
		<echo>Removing build directory</echo>
		<delete dir="${build.dir}"/>
		<echo>Removing any JavaCC artifacts</echo>
		<delete>
		   <fileset dir="." includes="**/*.jj" />
		</delete>
	</target>
	
	<!--
		print what and where is being built
	-->
	<target name="banner">
		<echo>*******************************************</echo>
		<echo>Building ${ant.project.name} in</echo>
        <echo>${ant.file}</echo>
		<echo>*******************************************</echo>
	</target>

    <!-- unittests targets -->
    <target name="test" depends="compile">
		<mkdir dir="${build.dir}/junit-reports"/>

        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path location="${build.dir}" />
<!-- test.classpath  must be set to make tests run-->
				<path refid="test.classpath"/>
            </classpath>
			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=58000"/>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${build.dir}/junit-reports">
                <fileset dir="src">
                  <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>

		<junitreport todir="${build.dir}/junit-reports">
		  <fileset dir="${build.dir}/junit-reports">
			<include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${build.dir}/junit-reports/html"/>
		</junitreport>
    </target>

    <!-- run it all -->
	<target name="all" depends="dist">
		<echo>all</echo>
	</target>

   
    <!-- upload a nightly build to java.net -->
    <!-- requires build.ant.properties to contain username/passwd details -->
    <!-- properties : java.net.username == username
		      java.net.passwd == password
		      uploaded.file.name == name of file to appear on java.net
		      uploaded.file.dir == name of directory on java.net
		      path.to.file == file in build area to upload
		      description == description of file
    -->
    <path id="upload.file.class.path">
        <fileset dir="${common.basedir}/utilities/jars/javanettasks" includes="**/*.jar"/>
    </path>


    <!-- this does java.net uploads to allow us to do nightly builds
       Username and pasword information is accessed from a file in
      ~/.java.net with contents similar to :
      userName=timf
      password=yadayada
      proxyServer=proxy.acme.com
      proxyPort=8080
     --> 
    <target name="upload">
	<taskdef name="javaNetUpload"
                 classname="org.kohsuke.jnt.ant.FileUploadTask"
                 classpathref="upload.file.class.path"/>
        <echo>Uploading file ${path.to.file} to ${uploaded.file.dir}/${uploaded.file.name}</echo>
        <javaNetUpload
                projectName="open-language-tools"
                toFile="${uploaded.file.dir}/${uploaded.file.name}"
                fromFile="${path.to.file}"
                fileDescription="${uploaded.file.description}"
                overwrite="yes"
                fileStatus="Draft"
        />
        
    </target>

</project>
